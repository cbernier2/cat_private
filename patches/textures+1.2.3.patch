diff --git a/node_modules/textures/dist/textures.d.ts b/node_modules/textures/dist/textures.d.ts
new file mode 100644
index 0000000..0f387f2
--- /dev/null
+++ b/node_modules/textures/dist/textures.d.ts
@@ -0,0 +1 @@
+declare module 'textures';
diff --git a/node_modules/textures/dist/textures.esm.js b/node_modules/textures/dist/textures.esm.js
deleted file mode 100644
index baf24fc..0000000
--- a/node_modules/textures/dist/textures.esm.js
+++ /dev/null
@@ -1,456 +0,0 @@
-function random() {
-  return "".concat(Math.random().toString(36), "00000000000000000").replace(/[^a-z]+/g, '').slice(0, 5);
-}
-
-function circles() {
-  var size = 20;
-  var background = '';
-  var radius = 2;
-  var complement = false;
-  var fill = '#343434';
-  var stroke = '#343434';
-  var strokeWidth = 0;
-  var id = random();
-
-  var $ = function $(selection) {
-    var group = selection.append('defs').append('pattern').attr('id', id).attr('patternUnits', 'userSpaceOnUse').attr('width', size).attr('height', size);
-
-    if (background) {
-      group.append('rect').attr('width', size).attr('height', size).attr('fill', background);
-    }
-
-    group.append('circle').attr('cx', size / 2).attr('cy', size / 2).attr('r', radius).attr('fill', fill).attr('stroke', stroke).attr('stroke-width', strokeWidth);
-
-    if (complement) {
-      for (var _i = 0, _arr = [[0, 0], [0, size], [size, 0], [size, size]]; _i < _arr.length; _i++) {
-        var corner = _arr[_i];
-        group.append('circle').attr('cx', corner[0]).attr('cy', corner[1]).attr('r', radius).attr('fill', fill).attr('stroke', stroke).attr('stroke-width', strokeWidth);
-      }
-    }
-  };
-
-  $.heavier = function (_) {
-    radius *= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.lighter = function (_) {
-    radius /= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.thinner = function (_) {
-    size *= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.thicker = function (_) {
-    size /= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.background = function (_) {
-    background = _;
-    return $;
-  };
-
-  $.size = function (_) {
-    size = _;
-    return $;
-  };
-
-  $.complement = function (_) {
-    complement = arguments.length === 0 ? true : _;
-    return $;
-  };
-
-  $.radius = function (_) {
-    radius = _;
-    return $;
-  };
-
-  $.fill = function (_) {
-    fill = _;
-    return $;
-  };
-
-  $.stroke = function (_) {
-    stroke = _;
-    return $;
-  };
-
-  $.strokeWidth = function (_) {
-    strokeWidth = _;
-    return $;
-  };
-
-  $.id = function (_) {
-    if (arguments.length === 0) {
-      return id;
-    }
-
-    id = _;
-    return $;
-  };
-
-  $.url = function () {
-    return "url(#".concat(id, ")");
-  };
-
-  return $;
-}
-
-function _unsupportedIterableToArray(o, minLen) {
-  if (!o) return;
-  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
-  var n = Object.prototype.toString.call(o).slice(8, -1);
-  if (n === "Object" && o.constructor) n = o.constructor.name;
-  if (n === "Map" || n === "Set") return Array.from(o);
-  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
-}
-
-function _arrayLikeToArray(arr, len) {
-  if (len == null || len > arr.length) len = arr.length;
-
-  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
-
-  return arr2;
-}
-
-function _createForOfIteratorHelper(o, allowArrayLike) {
-  var it;
-
-  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
-    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
-      if (it) o = it;
-      var i = 0;
-
-      var F = function () {};
-
-      return {
-        s: F,
-        n: function () {
-          if (i >= o.length) return {
-            done: true
-          };
-          return {
-            done: false,
-            value: o[i++]
-          };
-        },
-        e: function (e) {
-          throw e;
-        },
-        f: F
-      };
-    }
-
-    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
-  }
-
-  var normalCompletion = true,
-      didErr = false,
-      err;
-  return {
-    s: function () {
-      it = o[Symbol.iterator]();
-    },
-    n: function () {
-      var step = it.next();
-      normalCompletion = step.done;
-      return step;
-    },
-    e: function (e) {
-      didErr = true;
-      err = e;
-    },
-    f: function () {
-      try {
-        if (!normalCompletion && it.return != null) it.return();
-      } finally {
-        if (didErr) throw err;
-      }
-    }
-  };
-}
-
-function lines() {
-  var size = 20;
-  var stroke = '#343434';
-  var strokeWidth = 2;
-  var background = '';
-  var id = random();
-  var orientation = ['diagonal'];
-  var shapeRendering = 'auto';
-
-  var path = function path(orientation) {
-    var s = size;
-
-    switch (orientation) {
-      case '0/8':
-      case 'vertical':
-        return "M ".concat(s / 2, ", 0 l 0, ").concat(s);
-
-      case '1/8':
-        return "M ".concat(-s / 4, ",").concat(s, " l ").concat(s / 2, ",").concat(-s, " M ").concat(s / 4, ",").concat(s, " l ").concat(s / 2, ",").concat(-s, " M ").concat(s * 3 / 4, ",").concat(s, " l ").concat(s / 2, ",").concat(-s);
-
-      case '2/8':
-      case 'diagonal':
-        return "M 0,".concat(s, " l ").concat(s, ",").concat(-s, " M ").concat(-s / 4, ",").concat(s / 4, " l ").concat(s / 2, ",").concat(-s / 2, " M ").concat(3 / 4 * s, ",").concat(5 / 4 * s, " l ").concat(s / 2, ",").concat(-s / 2);
-
-      case '3/8':
-        return "M 0,".concat(3 / 4 * s, " l ").concat(s, ",").concat(-s / 2, " M 0,").concat(s / 4, " l ").concat(s, ",").concat(-s / 2, " M 0,").concat(s * 5 / 4, " l ").concat(s, ",").concat(-s / 2);
-
-      case '4/8':
-      case 'horizontal':
-        return "M 0,".concat(s / 2, " l ").concat(s, ",0");
-
-      case '5/8':
-        return "M 0,".concat(-s / 4, " l ").concat(s, ",").concat(s / 2, "M 0,").concat(s / 4, " l ").concat(s, ",").concat(s / 2, " M 0,").concat(s * 3 / 4, " l ").concat(s, ",").concat(s / 2);
-
-      case '6/8':
-        return "M 0,0 l ".concat(s, ",").concat(s, " M ").concat(-s / 4, ",").concat(3 / 4 * s, " l ").concat(s / 2, ",").concat(s / 2, " M ").concat(s * 3 / 4, ",").concat(-s / 4, " l ").concat(s / 2, ",").concat(s / 2);
-
-      case '7/8':
-        return "M ".concat(-s / 4, ",0 l ").concat(s / 2, ",").concat(s, " M ").concat(s / 4, ",0 l ").concat(s / 2, ",").concat(s, " M ").concat(s * 3 / 4, ",0 l ").concat(s / 2, ",").concat(s);
-
-      default:
-        return "M ".concat(s / 2, ", 0 l 0, ").concat(s);
-    }
-  };
-
-  var $ = function $(selection) {
-    var group = selection.append('defs').append('pattern').attr('id', id).attr('patternUnits', 'userSpaceOnUse').attr('width', size).attr('height', size);
-
-    if (background) {
-      group.append('rect').attr('width', size).attr('height', size).attr('fill', background);
-    }
-
-    var _iterator = _createForOfIteratorHelper(orientation),
-        _step;
-
-    try {
-      for (_iterator.s(); !(_step = _iterator.n()).done;) {
-        var o = _step.value;
-        group.append('path').attr('d', path(o)).attr('stroke-width', strokeWidth).attr('shape-rendering', shapeRendering).attr('stroke', stroke).attr('stroke-linecap', 'square');
-      }
-    } catch (err) {
-      _iterator.e(err);
-    } finally {
-      _iterator.f();
-    }
-  };
-
-  $.heavier = function (_) {
-    strokeWidth *= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.lighter = function (_) {
-    strokeWidth /= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.thinner = function (_) {
-    size *= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.thicker = function (_) {
-    size /= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.background = function (_) {
-    background = _;
-    return $;
-  };
-
-  $.size = function (_) {
-    size = _;
-    return $;
-  };
-
-  $.orientation = function () {
-    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
-      args[_key] = arguments[_key];
-    }
-
-    if (arguments.length === 0) {
-      return $;
-    }
-
-    orientation = args;
-    return $;
-  };
-
-  $.shapeRendering = function (_) {
-    shapeRendering = _;
-    return $;
-  };
-
-  $.stroke = function (_) {
-    stroke = _;
-    return $;
-  };
-
-  $.strokeWidth = function (_) {
-    strokeWidth = _;
-    return $;
-  };
-
-  $.id = function (_) {
-    if (arguments.length === 0) {
-      return id;
-    }
-
-    id = _;
-    return $;
-  };
-
-  $.url = function () {
-    return "url(#".concat(id, ")");
-  };
-
-  return $;
-}
-
-function paths() {
-  var width = 1;
-  var height = 1;
-  var size = 20;
-  var stroke = '#343434';
-  var strokeWidth = 2;
-  var background = '';
-
-  var d = function d(s) {
-    return "M ".concat(s / 4, ",").concat(s * 3 / 4, "l").concat(s / 4, ",").concat(-s / 2, "l").concat(s / 4, ",").concat(s / 2);
-  };
-
-  var id = random();
-  var fill = 'transparent';
-  var shapeRendering = 'auto';
-
-  var path = function path(_) {
-    var s = size;
-
-    switch (_) {
-      case 'squares':
-        return "M ".concat(s / 4, " ").concat(s / 4, " l ").concat(s / 2, " 0 l 0 ").concat(s / 2, " l ").concat(-s / 2, " 0 Z");
-
-      case 'nylon':
-        return "M 0 ".concat(s / 4, " l ").concat(s / 4, " 0 l 0 ").concat(-s / 4, " M ").concat(s * 3 / 4, " ").concat(s, " l 0 ").concat(-s / 4, " l ").concat(s / 4, " 0 M ").concat(s / 4, " ").concat(s / 2, " l 0 ").concat(s / 4, " l ").concat(s / 4, " 0 M ").concat(s / 2, " ").concat(s / 4, " l ").concat(s / 4, " 0 l 0 ").concat(s / 4);
-
-      case 'waves':
-        return "M 0 ".concat(s / 2, " c ").concat(s / 8, " ").concat(-s / 4, " , ").concat(s * 3 / 8, " ").concat(-s / 4, " , ").concat(s / 2, " 0 c ").concat(s / 8, " ").concat(s / 4, " , ").concat(s * 3 / 8, " ").concat(s / 4, " , ").concat(s / 2, " 0 M ").concat(-s / 2, " ").concat(s / 2, " c ").concat(s / 8, " ").concat(s / 4, " , ").concat(s * 3 / 8, " ").concat(s / 4, " , ").concat(s / 2, " 0 M ").concat(s, " ").concat(s / 2, " c ").concat(s / 8, " ").concat(-s / 4, " , ").concat(s * 3 / 8, " ").concat(-s / 4, " , ").concat(s / 2, " 0");
-
-      case 'woven':
-        return "M ".concat(s / 4, ",").concat(s / 4, "l").concat(s / 2, ",").concat(s / 2, "M").concat(s * 3 / 4, ",").concat(s / 4, "l").concat(s / 2, ",").concat(-s / 2, " M").concat(s / 4, ",").concat(s * 3 / 4, "l").concat(-s / 2, ",").concat(s / 2, "M").concat(s * 3 / 4, ",").concat(s * 5 / 4, "l").concat(s / 2, ",").concat(-s / 2, " M").concat(-s / 4, ",").concat(s / 4, "l").concat(s / 2, ",").concat(-s / 2);
-
-      case 'crosses':
-        return "M ".concat(s / 4, ",").concat(s / 4, "l").concat(s / 2, ",").concat(s / 2, "M").concat(s / 4, ",").concat(s * 3 / 4, "l").concat(s / 2, ",").concat(-s / 2);
-
-      case 'caps':
-        return "M ".concat(s / 4, ",").concat(s * 3 / 4, "l").concat(s / 4, ",").concat(-s / 2, "l").concat(s / 4, ",").concat(s / 2);
-
-      case 'hexagons':
-        width = 3;
-        height = Math.sqrt(3);
-        return "M ".concat(s, ",0 l ").concat(s, ",0 l ").concat(s / 2, ",").concat(s * Math.sqrt(3) / 2, " l ").concat(-s / 2, ",").concat(s * Math.sqrt(3) / 2, " l ").concat(-s, ",0 l ").concat(-s / 2, ",").concat(-s * Math.sqrt(3) / 2, " Z M 0,").concat(s * Math.sqrt(3) / 2, " l ").concat(s / 2, ",0 M ").concat(3 * s, ",").concat(s * Math.sqrt(3) / 2, " l ").concat(-s / 2, ",0");
-
-      default:
-        return _(s);
-    }
-  };
-
-  var $ = function $(selection) {
-    var p = path(d);
-    var group = selection.append('defs').append('pattern').attr('id', id).attr('patternUnits', 'userSpaceOnUse').attr('width', size * width).attr('height', size * height);
-
-    if (background) {
-      group.append('rect').attr('width', size * width).attr('height', size * height).attr('fill', background);
-    }
-
-    group.append('path').attr('d', p).attr('fill', fill).attr('stroke', stroke).attr('stroke-width', strokeWidth).attr('stroke-linecap', 'square').attr('shape-rendering', shapeRendering);
-  };
-
-  $.heavier = function (_) {
-    strokeWidth *= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.lighter = function (_) {
-    strokeWidth /= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.thinner = function (_) {
-    size *= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.thicker = function (_) {
-    size /= arguments.length === 0 ? 2 : 2 * _;
-    return $;
-  };
-
-  $.background = function (_) {
-    background = _;
-    return $;
-  };
-
-  $.shapeRendering = function (_) {
-    shapeRendering = _;
-    return $;
-  };
-
-  $.size = function (_) {
-    size = _;
-    return $;
-  };
-
-  $.d = function (_) {
-    d = _;
-    return $;
-  };
-
-  $.fill = function (_) {
-    fill = _;
-    return $;
-  };
-
-  $.stroke = function (_) {
-    stroke = _;
-    return $;
-  };
-
-  $.strokeWidth = function (_) {
-    strokeWidth = _;
-    return $;
-  };
-
-  $.id = function (_) {
-    if (arguments.length === 0) {
-      return id;
-    }
-
-    id = _;
-    return $;
-  };
-
-  $.url = function () {
-    return "url(#".concat(id, ")");
-  };
-
-  return $;
-}
-
-/* eslint import/no-anonymous-default-export: [2, {"allowObject": true}] */
-
-var main = {
-  circles: circles,
-  lines: lines,
-  paths: paths
-};
-
-export default main;
diff --git a/node_modules/textures/dist/textures.js b/node_modules/textures/dist/textures.js
index 56ebe9e..214c641 100644
--- a/node_modules/textures/dist/textures.js
+++ b/node_modules/textures/dist/textures.js
@@ -1 +1,484 @@
-!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(t=t||self).textures=n()}(this,function(){"use strict";function t(){return"".concat(Math.random().toString(36),"00000000000000000").replace(/[^a-z]+/g,"").slice(0,5)}function i(t,n){(null==n||n>t.length)&&(n=t.length);for(var c=0,a=new Array(n);c<n;c++)a[c]=t[c];return a}function d(t,n){var c;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(c=function(t,n){if(t){if("string"==typeof t)return i(t,n);var c=Object.prototype.toString.call(t).slice(8,-1);return"Object"===c&&t.constructor&&(c=t.constructor.name),"Map"===c||"Set"===c?Array.from(t):"Arguments"===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?i(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){c&&(t=c);var a=0,r=function(){};return{s:r,n:function(){return a>=t.length?{done:!0}:{done:!1,value:t[a++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,e=!0,u=!1;return{s:function(){c=t[Symbol.iterator]()},n:function(){var t=c.next();return e=t.done,t},e:function(t){u=!0,o=t},f:function(){try{e||null==c.return||c.return()}finally{if(u)throw o}}}}return{circles:function(){function n(t){var n=t.append("defs").append("pattern").attr("id",h).attr("patternUnits","userSpaceOnUse").attr("width",o).attr("height",o);if(e&&n.append("rect").attr("width",o).attr("height",o).attr("fill",e),n.append("circle").attr("cx",o/2).attr("cy",o/2).attr("r",u).attr("fill",l).attr("stroke",f).attr("stroke-width",s),i)for(var c=0,a=[[0,0],[0,o],[o,0],[o,o]];c<a.length;c++){var r=a[c];n.append("circle").attr("cx",r[0]).attr("cy",r[1]).attr("r",u).attr("fill",l).attr("stroke",f).attr("stroke-width",s)}}var o=20,e="",u=2,i=!1,l="#343434",f="#343434",s=0,h=t();return n.heavier=function(t){return u*=0===arguments.length?2:2*t,n},n.lighter=function(t){return u/=0===arguments.length?2:2*t,n},n.thinner=function(t){return o*=0===arguments.length?2:2*t,n},n.thicker=function(t){return o/=0===arguments.length?2:2*t,n},n.background=function(t){return e=t,n},n.size=function(t){return o=t,n},n.complement=function(t){return i=0===arguments.length||t,n},n.radius=function(t){return u=t,n},n.fill=function(t){return l=t,n},n.stroke=function(t){return f=t,n},n.strokeWidth=function(t){return s=t,n},n.id=function(t){return 0===arguments.length?h:(h=t,n)},n.url=function(){return"url(#".concat(h,")")},n},lines:function(){function o(t){var n=e;switch(t){case"0/8":case"vertical":return"M ".concat(n/2,", 0 l 0, ").concat(n);case"1/8":return"M ".concat(-n/4,",").concat(n," l ").concat(n/2,",").concat(-n," M ").concat(n/4,",").concat(n," l ").concat(n/2,",").concat(-n," M ").concat(3*n/4,",").concat(n," l ").concat(n/2,",").concat(-n);case"2/8":case"diagonal":return"M 0,".concat(n," l ").concat(n,",").concat(-n," M ").concat(-n/4,",").concat(n/4," l ").concat(n/2,",").concat(-n/2," M ").concat(.75*n,",").concat(5/4*n," l ").concat(n/2,",").concat(-n/2);case"3/8":return"M 0,".concat(.75*n," l ").concat(n,",").concat(-n/2," M 0,").concat(n/4," l ").concat(n,",").concat(-n/2," M 0,").concat(5*n/4," l ").concat(n,",").concat(-n/2);case"4/8":case"horizontal":return"M 0,".concat(n/2," l ").concat(n,",0");case"5/8":return"M 0,".concat(-n/4," l ").concat(n,",").concat(n/2,"M 0,").concat(n/4," l ").concat(n,",").concat(n/2," M 0,").concat(3*n/4," l ").concat(n,",").concat(n/2);case"6/8":return"M 0,0 l ".concat(n,",").concat(n," M ").concat(-n/4,",").concat(.75*n," l ").concat(n/2,",").concat(n/2," M ").concat(3*n/4,",").concat(-n/4," l ").concat(n/2,",").concat(n/2);case"7/8":return"M ".concat(-n/4,",0 l ").concat(n/2,",").concat(n," M ").concat(n/4,",0 l ").concat(n/2,",").concat(n," M ").concat(3*n/4,",0 l ").concat(n/2,",").concat(n);default:return"M ".concat(n/2,", 0 l 0, ").concat(n)}}function a(t){var n=t.append("defs").append("pattern").attr("id",f).attr("patternUnits","userSpaceOnUse").attr("width",e).attr("height",e);l&&n.append("rect").attr("width",e).attr("height",e).attr("fill",l);var c,a=d(s);try{for(a.s();!(c=a.n()).done;){var r=c.value;n.append("path").attr("d",o(r)).attr("stroke-width",i).attr("shape-rendering",h).attr("stroke",u).attr("stroke-linecap","square")}}catch(t){a.e(t)}finally{a.f()}}var e=20,u="#343434",i=2,l="",f=t(),s=["diagonal"],h="auto";return a.heavier=function(t){return i*=0===arguments.length?2:2*t,a},a.lighter=function(t){return i/=0===arguments.length?2:2*t,a},a.thinner=function(t){return e*=0===arguments.length?2:2*t,a},a.thicker=function(t){return e/=0===arguments.length?2:2*t,a},a.background=function(t){return l=t,a},a.size=function(t){return e=t,a},a.orientation=function(){for(var t=arguments.length,n=new Array(t),c=0;c<t;c++)n[c]=arguments[c];return 0===arguments.length||(s=n),a},a.shapeRendering=function(t){return h=t,a},a.stroke=function(t){return u=t,a},a.strokeWidth=function(t){return i=t,a},a.id=function(t){return 0===arguments.length?f:(f=t,a)},a.url=function(){return"url(#".concat(f,")")},a},paths:function(){function n(t){var n=function(t){var n=o;switch(t){case"squares":return"M ".concat(n/4," ").concat(n/4," l ").concat(n/2," 0 l 0 ").concat(n/2," l ").concat(-n/2," 0 Z");case"nylon":return"M 0 ".concat(n/4," l ").concat(n/4," 0 l 0 ").concat(-n/4," M ").concat(3*n/4," ").concat(n," l 0 ").concat(-n/4," l ").concat(n/4," 0 M ").concat(n/4," ").concat(n/2," l 0 ").concat(n/4," l ").concat(n/4," 0 M ").concat(n/2," ").concat(n/4," l ").concat(n/4," 0 l 0 ").concat(n/4);case"waves":return"M 0 ".concat(n/2," c ").concat(n/8," ").concat(-n/4," , ").concat(3*n/8," ").concat(-n/4," , ").concat(n/2," 0 c ").concat(n/8," ").concat(n/4," , ").concat(3*n/8," ").concat(n/4," , ").concat(n/2," 0 M ").concat(-n/2," ").concat(n/2," c ").concat(n/8," ").concat(n/4," , ").concat(3*n/8," ").concat(n/4," , ").concat(n/2," 0 M ").concat(n," ").concat(n/2," c ").concat(n/8," ").concat(-n/4," , ").concat(3*n/8," ").concat(-n/4," , ").concat(n/2," 0");case"woven":return"M ".concat(n/4,",").concat(n/4,"l").concat(n/2,",").concat(n/2,"M").concat(3*n/4,",").concat(n/4,"l").concat(n/2,",").concat(-n/2," M").concat(n/4,",").concat(3*n/4,"l").concat(-n/2,",").concat(n/2,"M").concat(3*n/4,",").concat(5*n/4,"l").concat(n/2,",").concat(-n/2," M").concat(-n/4,",").concat(n/4,"l").concat(n/2,",").concat(-n/2);case"crosses":return"M ".concat(n/4,",").concat(n/4,"l").concat(n/2,",").concat(n/2,"M").concat(n/4,",").concat(3*n/4,"l").concat(n/2,",").concat(-n/2);case"caps":return"M ".concat(n/4,",").concat(3*n/4,"l").concat(n/4,",").concat(-n/2,"l").concat(n/4,",").concat(n/2);case"hexagons":return a=3,r=Math.sqrt(3),"M ".concat(n,",0 l ").concat(n,",0 l ").concat(n/2,",").concat(n*Math.sqrt(3)/2," l ").concat(-n/2,",").concat(n*Math.sqrt(3)/2," l ").concat(-n,",0 l ").concat(-n/2,",").concat(-n*Math.sqrt(3)/2," Z M 0,").concat(n*Math.sqrt(3)/2," l ").concat(n/2,",0 M ").concat(3*n,",").concat(n*Math.sqrt(3)/2," l ").concat(-n/2,",0");default:return t(n)}}(l),c=t.append("defs").append("pattern").attr("id",f).attr("patternUnits","userSpaceOnUse").attr("width",o*a).attr("height",o*r);i&&c.append("rect").attr("width",o*a).attr("height",o*r).attr("fill",i),c.append("path").attr("d",n).attr("fill",s).attr("stroke",e).attr("stroke-width",u).attr("stroke-linecap","square").attr("shape-rendering",h)}var a=1,r=1,o=20,e="#343434",u=2,i="",l=function(t){return"M ".concat(t/4,",").concat(3*t/4,"l").concat(t/4,",").concat(-t/2,"l").concat(t/4,",").concat(t/2)},f=t(),s="transparent",h="auto";return n.heavier=function(t){return u*=0===arguments.length?2:2*t,n},n.lighter=function(t){return u/=0===arguments.length?2:2*t,n},n.thinner=function(t){return o*=0===arguments.length?2:2*t,n},n.thicker=function(t){return o/=0===arguments.length?2:2*t,n},n.background=function(t){return i=t,n},n.shapeRendering=function(t){return h=t,n},n.size=function(t){return o=t,n},n.d=function(t){return l=t,n},n.fill=function(t){return s=t,n},n.stroke=function(t){return e=t,n},n.strokeWidth=function(t){return u=t,n},n.id=function(t){return 0===arguments.length?f:(f=t,n)},n.url=function(){return"url(#".concat(f,")")},n}}});
+function random() {
+  return "".concat(Math.random().toString(36), "00000000000000000").replace(/[^a-z]+/g, '').slice(0, 5);
+}
+
+function circles() {
+  var size = 20;
+  var background = '';
+  var radius = 2;
+  var complement = false;
+  var fill = '#343434';
+  var stroke = '#343434';
+  var strokeWidth = 0;
+  var id = random();
+
+  var $ = function $(selection) {
+    var group = selection.append('defs').append('pattern').attr('id', id).attr('patternUnits', 'userSpaceOnUse').attr('width', size).attr('height', size);
+
+    if (background) {
+      group.append('rect').attr('width', size).attr('height', size).attr('fill', background);
+    }
+
+    group.append('circle').attr('cx', size / 2).attr('cy', size / 2).attr('r', radius).attr('fill', fill).attr('stroke', stroke).attr('stroke-width', strokeWidth);
+
+    if (complement) {
+      for (var _i = 0, _arr = [[0, 0], [0, size], [size, 0], [size, size]]; _i < _arr.length; _i++) {
+        var corner = _arr[_i];
+        group.append('circle').attr('cx', corner[0]).attr('cy', corner[1]).attr('r', radius).attr('fill', fill).attr('stroke', stroke).attr('stroke-width', strokeWidth);
+      }
+    }
+  };
+
+  $.serialize = function () {
+    return { name: 'circles', size, background, radius, complement, fill, stroke, strokeWidth, id };
+  };
+
+  $.heavier = function (_) {
+    radius *= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.lighter = function (_) {
+    radius /= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.thinner = function (_) {
+    size *= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.thicker = function (_) {
+    size /= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.background = function (_) {
+    background = _;
+    return $;
+  };
+
+  $.size = function (_) {
+    size = _;
+    return $;
+  };
+
+  $.complement = function (_) {
+    complement = arguments.length === 0 ? true : _;
+    return $;
+  };
+
+  $.radius = function (_) {
+    radius = _;
+    return $;
+  };
+
+  $.fill = function (_) {
+    fill = _;
+    return $;
+  };
+
+  $.stroke = function (_) {
+    stroke = _;
+    return $;
+  };
+
+  $.strokeWidth = function (_) {
+    strokeWidth = _;
+    return $;
+  };
+
+  $.id = function (_) {
+    if (arguments.length === 0) {
+      return id;
+    }
+
+    id = _;
+    return $;
+  };
+
+  $.url = function () {
+    return "url(#".concat(id, ")");
+  };
+
+  return $;
+}
+
+function _unsupportedIterableToArray(o, minLen) {
+  if (!o) return;
+  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
+  var n = Object.prototype.toString.call(o).slice(8, -1);
+  if (n === "Object" && o.constructor) n = o.constructor.name;
+  if (n === "Map" || n === "Set") return Array.from(o);
+  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
+}
+
+function _arrayLikeToArray(arr, len) {
+  if (len == null || len > arr.length) len = arr.length;
+
+  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
+
+  return arr2;
+}
+
+function _createForOfIteratorHelper(o, allowArrayLike) {
+  var it;
+
+  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
+    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
+      if (it) o = it;
+      var i = 0;
+
+      var F = function () {};
+
+      return {
+        s: F,
+        n: function () {
+          if (i >= o.length) return {
+            done: true
+          };
+          return {
+            done: false,
+            value: o[i++]
+          };
+        },
+        e: function (e) {
+          throw e;
+        },
+        f: F
+      };
+    }
+
+    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
+  }
+
+  var normalCompletion = true,
+      didErr = false,
+      err;
+  return {
+    s: function () {
+      it = o[Symbol.iterator]();
+    },
+    n: function () {
+      var step = it.next();
+      normalCompletion = step.done;
+      return step;
+    },
+    e: function (e) {
+      didErr = true;
+      err = e;
+    },
+    f: function () {
+      try {
+        if (!normalCompletion && it.return != null) it.return();
+      } finally {
+        if (didErr) throw err;
+      }
+    }
+  };
+}
+
+function lines() {
+  var size = 20;
+  var stroke = '#343434';
+  var strokeWidth = 2;
+  var background = '';
+  var id = random();
+  var orientation = ['diagonal'];
+  var shapeRendering = 'auto';
+
+  var path = function path(orientation) {
+    var s = size;
+
+    switch (orientation) {
+      case '0/8':
+      case 'vertical':
+        return "M ".concat(s / 2, ", 0 l 0, ").concat(s);
+
+      case '1/8':
+        return "M ".concat(-s / 4, ",").concat(s, " l ").concat(s / 2, ",").concat(-s, " M ").concat(s / 4, ",").concat(s, " l ").concat(s / 2, ",").concat(-s, " M ").concat(s * 3 / 4, ",").concat(s, " l ").concat(s / 2, ",").concat(-s);
+
+      case '2/8':
+      case 'diagonal':
+        return "M 0,".concat(s, " l ").concat(s, ",").concat(-s, " M ").concat(-s / 4, ",").concat(s / 4, " l ").concat(s / 2, ",").concat(-s / 2, " M ").concat(3 / 4 * s, ",").concat(5 / 4 * s, " l ").concat(s / 2, ",").concat(-s / 2);
+
+      case '3/8':
+        return "M 0,".concat(3 / 4 * s, " l ").concat(s, ",").concat(-s / 2, " M 0,").concat(s / 4, " l ").concat(s, ",").concat(-s / 2, " M 0,").concat(s * 5 / 4, " l ").concat(s, ",").concat(-s / 2);
+
+      case '4/8':
+      case 'horizontal':
+        return "M 0,".concat(s / 2, " l ").concat(s, ",0");
+
+      case '5/8':
+        return "M 0,".concat(-s / 4, " l ").concat(s, ",").concat(s / 2, "M 0,").concat(s / 4, " l ").concat(s, ",").concat(s / 2, " M 0,").concat(s * 3 / 4, " l ").concat(s, ",").concat(s / 2);
+
+      case '6/8':
+        return "M 0,0 l ".concat(s, ",").concat(s, " M ").concat(-s / 4, ",").concat(3 / 4 * s, " l ").concat(s / 2, ",").concat(s / 2, " M ").concat(s * 3 / 4, ",").concat(-s / 4, " l ").concat(s / 2, ",").concat(s / 2);
+
+      case '7/8':
+        return "M ".concat(-s / 4, ",0 l ").concat(s / 2, ",").concat(s, " M ").concat(s / 4, ",0 l ").concat(s / 2, ",").concat(s, " M ").concat(s * 3 / 4, ",0 l ").concat(s / 2, ",").concat(s);
+
+      default:
+        return "M ".concat(s / 2, ", 0 l 0, ").concat(s);
+    }
+  };
+
+  var $ = function $(selection) {
+    var group = selection.append('defs').append('pattern').attr('id', id).attr('patternUnits', 'userSpaceOnUse').attr('width', size).attr('height', size);
+
+    if (background) {
+      group.append('rect').attr('width', size).attr('height', size).attr('fill', background);
+    }
+
+    var _iterator = _createForOfIteratorHelper(orientation),
+        _step;
+
+    try {
+      for (_iterator.s(); !(_step = _iterator.n()).done;) {
+        var o = _step.value;
+        group.append('path').attr('d', path(o)).attr('stroke-width', strokeWidth).attr('shape-rendering', shapeRendering).attr('stroke', stroke).attr('stroke-linecap', 'square');
+      }
+    } catch (err) {
+      _iterator.e(err);
+    } finally {
+      _iterator.f();
+    }
+  };
+
+  $.serialize = function () {
+    var paths = [];
+
+    var _iterator = _createForOfIteratorHelper(orientation),
+      _step;
+
+    try {
+      for (_iterator.s(); !(_step = _iterator.n()).done;) {
+        paths.push(path(_step.value));
+      }
+    } catch (err) {
+      _iterator.e(err);
+    } finally {
+      _iterator.f();
+    }
+
+    return { name: 'lines', size, background, stroke, strokeWidth, shapeRendering, id, paths };
+  };
+
+  $.heavier = function (_) {
+    strokeWidth *= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.lighter = function (_) {
+    strokeWidth /= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.thinner = function (_) {
+    size *= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.thicker = function (_) {
+    size /= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.background = function (_) {
+    background = _;
+    return $;
+  };
+
+  $.size = function (_) {
+    size = _;
+    return $;
+  };
+
+  $.orientation = function () {
+    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
+      args[_key] = arguments[_key];
+    }
+
+    if (arguments.length === 0) {
+      return $;
+    }
+
+    orientation = args;
+    return $;
+  };
+
+  $.shapeRendering = function (_) {
+    shapeRendering = _;
+    return $;
+  };
+
+  $.stroke = function (_) {
+    stroke = _;
+    return $;
+  };
+
+  $.strokeWidth = function (_) {
+    strokeWidth = _;
+    return $;
+  };
+
+  $.id = function (_) {
+    if (arguments.length === 0) {
+      return id;
+    }
+
+    id = _;
+    return $;
+  };
+
+  $.url = function () {
+    return "url(#".concat(id, ")");
+  };
+
+  return $;
+}
+
+function paths() {
+  var width = 1;
+  var height = 1;
+  var size = 20;
+  var stroke = '#343434';
+  var strokeWidth = 2;
+  var background = '';
+
+  var d = function d(s) {
+    return "M ".concat(s / 4, ",").concat(s * 3 / 4, "l").concat(s / 4, ",").concat(-s / 2, "l").concat(s / 4, ",").concat(s / 2);
+  };
+
+  var id = random();
+  var fill = 'transparent';
+  var shapeRendering = 'auto';
+
+  var path = function path(_) {
+    var s = size;
+
+    switch (_) {
+      case 'squares':
+        return "M ".concat(s / 4, " ").concat(s / 4, " l ").concat(s / 2, " 0 l 0 ").concat(s / 2, " l ").concat(-s / 2, " 0 Z");
+
+      case 'nylon':
+        return "M 0 ".concat(s / 4, " l ").concat(s / 4, " 0 l 0 ").concat(-s / 4, " M ").concat(s * 3 / 4, " ").concat(s, " l 0 ").concat(-s / 4, " l ").concat(s / 4, " 0 M ").concat(s / 4, " ").concat(s / 2, " l 0 ").concat(s / 4, " l ").concat(s / 4, " 0 M ").concat(s / 2, " ").concat(s / 4, " l ").concat(s / 4, " 0 l 0 ").concat(s / 4);
+
+      case 'waves':
+        return "M 0 ".concat(s / 2, " c ").concat(s / 8, " ").concat(-s / 4, " , ").concat(s * 3 / 8, " ").concat(-s / 4, " , ").concat(s / 2, " 0 c ").concat(s / 8, " ").concat(s / 4, " , ").concat(s * 3 / 8, " ").concat(s / 4, " , ").concat(s / 2, " 0 M ").concat(-s / 2, " ").concat(s / 2, " c ").concat(s / 8, " ").concat(s / 4, " , ").concat(s * 3 / 8, " ").concat(s / 4, " , ").concat(s / 2, " 0 M ").concat(s, " ").concat(s / 2, " c ").concat(s / 8, " ").concat(-s / 4, " , ").concat(s * 3 / 8, " ").concat(-s / 4, " , ").concat(s / 2, " 0");
+
+      case 'woven':
+        return "M ".concat(s / 4, ",").concat(s / 4, "l").concat(s / 2, ",").concat(s / 2, "M").concat(s * 3 / 4, ",").concat(s / 4, "l").concat(s / 2, ",").concat(-s / 2, " M").concat(s / 4, ",").concat(s * 3 / 4, "l").concat(-s / 2, ",").concat(s / 2, "M").concat(s * 3 / 4, ",").concat(s * 5 / 4, "l").concat(s / 2, ",").concat(-s / 2, " M").concat(-s / 4, ",").concat(s / 4, "l").concat(s / 2, ",").concat(-s / 2);
+
+      case 'crosses':
+        return "M ".concat(s / 4, ",").concat(s / 4, "l").concat(s / 2, ",").concat(s / 2, "M").concat(s / 4, ",").concat(s * 3 / 4, "l").concat(s / 2, ",").concat(-s / 2);
+
+      case 'caps':
+        return "M ".concat(s / 4, ",").concat(s * 3 / 4, "l").concat(s / 4, ",").concat(-s / 2, "l").concat(s / 4, ",").concat(s / 2);
+
+      case 'hexagons':
+        width = 3;
+        height = Math.sqrt(3);
+        return "M ".concat(s, ",0 l ").concat(s, ",0 l ").concat(s / 2, ",").concat(s * Math.sqrt(3) / 2, " l ").concat(-s / 2, ",").concat(s * Math.sqrt(3) / 2, " l ").concat(-s, ",0 l ").concat(-s / 2, ",").concat(-s * Math.sqrt(3) / 2, " Z M 0,").concat(s * Math.sqrt(3) / 2, " l ").concat(s / 2, ",0 M ").concat(3 * s, ",").concat(s * Math.sqrt(3) / 2, " l ").concat(-s / 2, ",0");
+
+      default:
+        return _(s);
+    }
+  };
+
+  var $ = function $(selection) {
+    var p = path(d);
+    var group = selection.append('defs').append('pattern').attr('id', id).attr('patternUnits', 'userSpaceOnUse').attr('width', size * width).attr('height', size * height);
+
+    if (background) {
+      group.append('rect').attr('width', size * width).attr('height', size * height).attr('fill', background);
+    }
+
+    group.append('path').attr('d', p).attr('fill', fill).attr('stroke', stroke).attr('stroke-width', strokeWidth).attr('stroke-linecap', 'square').attr('shape-rendering', shapeRendering);
+  };
+
+  $.serialize = function () {
+    var path = path(d);
+    return { name: 'paths', size, background, stroke, strokeWidth, width, height, id, path, fill, shapeRendering };
+  };
+
+  $.heavier = function (_) {
+    strokeWidth *= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.lighter = function (_) {
+    strokeWidth /= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.thinner = function (_) {
+    size *= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.thicker = function (_) {
+    size /= arguments.length === 0 ? 2 : 2 * _;
+    return $;
+  };
+
+  $.background = function (_) {
+    background = _;
+    return $;
+  };
+
+  $.shapeRendering = function (_) {
+    shapeRendering = _;
+    return $;
+  };
+
+  $.size = function (_) {
+    size = _;
+    return $;
+  };
+
+  $.d = function (_) {
+    d = _;
+    return $;
+  };
+
+  $.fill = function (_) {
+    fill = _;
+    return $;
+  };
+
+  $.stroke = function (_) {
+    stroke = _;
+    return $;
+  };
+
+  $.strokeWidth = function (_) {
+    strokeWidth = _;
+    return $;
+  };
+
+  $.id = function (_) {
+    if (arguments.length === 0) {
+      return id;
+    }
+
+    id = _;
+    return $;
+  };
+
+  $.url = function () {
+    return "url(#".concat(id, ")");
+  };
+
+  return $;
+}
+
+/* eslint import/no-anonymous-default-export: [2, {"allowObject": true}] */
+
+var main = {
+  circles: circles,
+  lines: lines,
+  paths: paths
+};
+
+export default main;
