/* eslint-disable */
'use strict';
var __extends =
  (this && this.__extends) ||
  (function () {
    var extendStatics =
      Object.setPrototypeOf ||
      ({__proto__: []} instanceof Array &&
        function (d, b) {
          d.__proto__ = b;
        }) ||
      function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) {
            d[p] = b[p];
          }
        }
      };
    return function (d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype =
        b === null
          ? Object.create(b)
          : ((__.prototype = b.prototype), new __());
    };
  })();
Object.defineProperty(exports, '__esModule', {value: true});
// Generated by class minestar.units.typescriptgenerator.TypeScriptGenerator at 2021-06-21T05:08:28.224395Z
// DO NOT EDIT THIS FILE DIRECTLY OTHERWISE YOUR CHANGES MAY BE LOST
var units;
(function (units_1) {
  /**
   * Types of Quantity.
   */
  var QuantityType;
  (function (QuantityType) {
    QuantityType[(QuantityType.ABSORBED_DOSE = 1)] = 'ABSORBED_DOSE';
    QuantityType[(QuantityType.ACCELERATION = 2)] = 'ACCELERATION';
    QuantityType[(QuantityType.ACIDITY = 3)] = 'ACIDITY';
    QuantityType[(QuantityType.AMOUNT_OF_SUBSTANCE = 4)] =
      'AMOUNT_OF_SUBSTANCE';
    QuantityType[(QuantityType.ANGLE = 5)] = 'ANGLE';
    QuantityType[(QuantityType.ANGULAR_ACCELERATION = 6)] =
      'ANGULAR_ACCELERATION';
    QuantityType[(QuantityType.ANGULAR_SPEED = 7)] = 'ANGULAR_SPEED';
    QuantityType[(QuantityType.APPARENT_POWER = 8)] = 'APPARENT_POWER';
    QuantityType[(QuantityType.AREA = 9)] = 'AREA';
    QuantityType[(QuantityType.BANK_VOLUME = 10)] = 'BANK_VOLUME';
    QuantityType[(QuantityType.BANK_VOLUME_FLOW_RATE = 11)] =
      'BANK_VOLUME_FLOW_RATE';
    QuantityType[(QuantityType.COUNT_PER_TIME = 12)] = 'COUNT_PER_TIME';
    QuantityType[(QuantityType.CURVATURE = 13)] = 'CURVATURE';
    QuantityType[(QuantityType.DENSITY = 14)] = 'DENSITY';
    QuantityType[(QuantityType.ELECTRIC_CAPACITANCE = 15)] =
      'ELECTRIC_CAPACITANCE';
    QuantityType[(QuantityType.ELECTRIC_CHARGE = 16)] = 'ELECTRIC_CHARGE';
    QuantityType[(QuantityType.ELECTRIC_CONDUCTANCE = 17)] =
      'ELECTRIC_CONDUCTANCE';
    QuantityType[(QuantityType.ELECTRIC_CURRENT = 18)] = 'ELECTRIC_CURRENT';
    QuantityType[(QuantityType.ELECTRIC_INDUCTANCE = 19)] =
      'ELECTRIC_INDUCTANCE';
    QuantityType[(QuantityType.ELECTRIC_POTENTIAL = 20)] = 'ELECTRIC_POTENTIAL';
    QuantityType[(QuantityType.ELECTRIC_RESISTANCE = 21)] =
      'ELECTRIC_RESISTANCE';
    QuantityType[(QuantityType.ENERGY = 22)] = 'ENERGY';
    QuantityType[(QuantityType.ENERGY_PER_FUEL_BURN = 23)] =
      'ENERGY_PER_FUEL_BURN';
    QuantityType[(QuantityType.FORCE = 24)] = 'FORCE';
    QuantityType[(QuantityType.FREQUENCY = 25)] = 'FREQUENCY';
    QuantityType[(QuantityType.FUEL_BURN_PER_DISTANCE = 26)] =
      'FUEL_BURN_PER_DISTANCE';
    QuantityType[(QuantityType.ILLUMINANCE = 27)] = 'ILLUMINANCE';
    QuantityType[(QuantityType.INDEX = 28)] = 'INDEX';
    QuantityType[(QuantityType.LATITUDE = 29)] = 'LATITUDE';
    QuantityType[(QuantityType.LENGTH = 30)] = 'LENGTH';
    QuantityType[(QuantityType.LIQUID_VOLUME = 31)] = 'LIQUID_VOLUME';
    QuantityType[(QuantityType.LIQUID_VOLUME_PER_AREA = 32)] =
      'LIQUID_VOLUME_PER_AREA';
    QuantityType[(QuantityType.LOAD = 33)] = 'LOAD';
    QuantityType[(QuantityType.LOAD_RATE = 34)] = 'LOAD_RATE';
    QuantityType[(QuantityType.LONGITUDE = 35)] = 'LONGITUDE';
    QuantityType[(QuantityType.LOOSE_VOLUME = 36)] = 'LOOSE_VOLUME';
    QuantityType[(QuantityType.LOOSE_VOLUME_FLOW_RATE = 37)] =
      'LOOSE_VOLUME_FLOW_RATE';
    QuantityType[(QuantityType.LUMINOUS_FLUX = 38)] = 'LUMINOUS_FLUX';
    QuantityType[(QuantityType.LUMINOUS_INTENSITY = 39)] = 'LUMINOUS_INTENSITY';
    QuantityType[(QuantityType.MAGNETIC_FLUX = 40)] = 'MAGNETIC_FLUX';
    QuantityType[(QuantityType.MAGNETIC_FLUX_DENSITY = 41)] =
      'MAGNETIC_FLUX_DENSITY';
    QuantityType[(QuantityType.MASS = 42)] = 'MASS';
    QuantityType[(QuantityType.MASS_DISTANCE = 43)] = 'MASS_DISTANCE';
    QuantityType[(QuantityType.MASS_FLOW_RATE = 44)] = 'MASS_FLOW_RATE';
    QuantityType[(QuantityType.MASS_SPEED = 45)] = 'MASS_SPEED';
    QuantityType[(QuantityType.PARTS_PER_PARTS = 46)] = 'PARTS_PER_PARTS';
    QuantityType[(QuantityType.POWER = 47)] = 'POWER';
    QuantityType[(QuantityType.PRESSURE = 48)] = 'PRESSURE';
    QuantityType[(QuantityType.QUANTITY = 49)] = 'QUANTITY';
    QuantityType[(QuantityType.RADIOACTIVITY = 50)] = 'RADIOACTIVITY';
    QuantityType[(QuantityType.RATIO = 51)] = 'RATIO';
    QuantityType[(QuantityType.REACTIVE_POWER = 52)] = 'REACTIVE_POWER';
    QuantityType[(QuantityType.SCREEN_RESOLUTION = 53)] = 'SCREEN_RESOLUTION';
    QuantityType[(QuantityType.SCREEN_WIDTH = 54)] = 'SCREEN_WIDTH';
    QuantityType[(QuantityType.SIGNAL_STRENGTH = 55)] = 'SIGNAL_STRENGTH';
    QuantityType[(QuantityType.SOLID_ANGLE = 56)] = 'SOLID_ANGLE';
    QuantityType[(QuantityType.SPEED = 57)] = 'SPEED';
    QuantityType[(QuantityType.STORAGE = 58)] = 'STORAGE';
    QuantityType[(QuantityType.TEMPERATURE = 59)] = 'TEMPERATURE';
    QuantityType[(QuantityType.TIME = 60)] = 'TIME';
    QuantityType[(QuantityType.TORQUE = 61)] = 'TORQUE';
    QuantityType[(QuantityType.UNITLESS = 62)] = 'UNITLESS';
    QuantityType[(QuantityType.VISCOSITY = 63)] = 'VISCOSITY';
    QuantityType[(QuantityType.VOLUME = 64)] = 'VOLUME';
    QuantityType[(QuantityType.VOLUMETRIC_FLOW_RATE = 65)] =
      'VOLUMETRIC_FLOW_RATE';
  })((QuantityType = units_1.QuantityType || (units_1.QuantityType = {})));
  /**
   * Unit of measurement.
   */
  var Unit = /** @class */ (function () {
    function Unit(_symbol, _name, _quantityType) {
      this._symbol = _symbol;
      this._name = _name;
      this._quantityType = _quantityType;
    }
    /**
     * Return the {@link Unit} with the given {@code symbolOrName}
     *
     * @param symbolOrName A unit symbol or name
     * @return the {@link Unit} with the given {@code symbolOrName}
     * @throws Error when symbol/name is not found
     */
    Unit.of = function (symbolOrName) {
      var unit = UNITS_BY_SYMBOL_AND_NAME[symbolOrName];
      if (unit == null) {
        throw new Error(
          "No unit found with symbol/name '" + symbolOrName + "'",
        );
      }
      return unit;
    };
    Object.defineProperty(Unit.prototype, 'symbol', {
      get: function () {
        return this._symbol;
      },
      enumerable: true,
      configurable: true,
    });
    Object.defineProperty(Unit.prototype, 'name', {
      get: function () {
        return this._name;
      },
      enumerable: true,
      configurable: true,
    });
    Object.defineProperty(Unit.prototype, 'quantityType', {
      get: function () {
        return this._quantityType;
      },
      enumerable: true,
      configurable: true,
    });
    Unit.prototype.toString = function () {
      return this._symbol;
    };
    /**
     * Return the system {@link Unit} representing the set of units of the same quantity type
     *
     * @return the system {@link Unit} representing the set of units of the same quantity type
     */
    Unit.prototype.systemUnit = function () {
      return _localUnitSystem.systemUnit(this._quantityType);
    };
    /**
     * Return the 'preferred' {@link Unit} representing the set of units of the same quantity type
     *
     * @return the 'preferred' {@link Unit} representing the set of units of the same quantity type
     */
    Unit.prototype.preferredUnit = function () {
      return _localUnitSystem.preferredUnit(this._quantityType);
    };
    /**
     * Convert the {@code value} from this unit to the base (SI) unit of this {@code quantityType}.
     *
     * @param value A number
     * @return the {@code value}, converted from this unit to the base (SI) unit of this {@code quantityType}
     */
    Unit.prototype.toBaseUnit = function (value) {
      if (value == null) {
        return value;
      }
      var srcValueQuantity = Quantity.of(value, this);
      srcValueQuantity.toSystemUnit().value;
    };
    /**
     * Convert the {@code value} from the base (SI) unit of this {@code quantityType} to this unit.
     *
     * @param value A number
     * @return the {@code value}, converted from the base (SI) unit of this {@code quantityType} to this unit.
     */
    Unit.prototype.fromBaseUnit = function (value) {
      if (value == null) {
        return value;
      }
      var srcValueQuantity = Quantity.of(value, this.systemUnit());
      srcValueQuantity.toUnit(this).value;
    };
    return Unit;
  })();
  units_1.Unit = Unit;
  /**
   * A base (SI) unit.
   */
  var BaseUnit = /** @class */ (function (_super) {
    __extends(BaseUnit, _super);
    function BaseUnit(_symbol, _name, _quantityType) {
      return _super.call(this, _symbol, _name, _quantityType) || this;
    }
    BaseUnit.prototype.toBaseUnit = function (value) {
      return value;
    };
    BaseUnit.prototype.fromBaseUnit = function (value) {
      return value;
    };
    return BaseUnit;
  })(Unit);
  /**
   * A scaled alternative to a {@link BaseUnit}.
   *
   * 1 x ScaledUnit = _scale * BaseUnit
   */
  var ScaledUnit = /** @class */ (function (_super) {
    __extends(ScaledUnit, _super);
    function ScaledUnit(_symbol, _name, _scale, _baseUnit) {
      var _this =
        _super.call(this, _symbol, _name, _baseUnit.quantityType) || this;
      _this._scale = _scale;
      _this._baseUnit = _baseUnit;
      return _this;
    }
    ScaledUnit.prototype.toBaseUnit = function (value) {
      return value * this._scale;
    };
    ScaledUnit.prototype.fromBaseUnit = function (value) {
      return value / this._scale;
    };
    return ScaledUnit;
  })(Unit);
  /**
   * An offset alternative to a {@link BaseUnit}.
   *
   * 1 x OffsetUnit = BaseUnit + _offset
   */
  var OffsetUnit = /** @class */ (function (_super) {
    __extends(OffsetUnit, _super);
    function OffsetUnit(_symbol, _name, _offset, _baseUnit) {
      var _this =
        _super.call(this, _symbol, _name, _baseUnit.quantityType) || this;
      _this._offset = _offset;
      _this._baseUnit = _baseUnit;
      return _this;
    }
    OffsetUnit.prototype.toBaseUnit = function (value) {
      return value + this._offset;
    };
    OffsetUnit.prototype.fromBaseUnit = function (value) {
      return value - this._offset;
    };
    return OffsetUnit;
  })(Unit);
  /**
   * A scaled and offset alternative to a {@link BaseUnit}.
   *
   * 1 x ScaledAndOffsetUnit = (_scale * BaseUnit) + _offset
   */
  var ScaledAndOffsetUnit = /** @class */ (function (_super) {
    __extends(ScaledAndOffsetUnit, _super);
    function ScaledAndOffsetUnit(_symbol, _name, _scale, _offset, _baseUnit) {
      var _this =
        _super.call(this, _symbol, _name, _baseUnit.quantityType) || this;
      _this._scale = _scale;
      _this._offset = _offset;
      _this._baseUnit = _baseUnit;
      return _this;
    }
    ScaledAndOffsetUnit.prototype.toBaseUnit = function (value) {
      return value * this._scale + this._offset;
    };
    ScaledAndOffsetUnit.prototype.fromBaseUnit = function (value) {
      return (value - this._offset) / this._scale;
    };
    return ScaledAndOffsetUnit;
  })(Unit);
  /**
   * An offset then scaled alternative to a {@link BaseUnit}.
   *
   * 1 x OffsetAndScaledUnit = (_offset + BaseUnit) * _scale
   */
  var OffsetAndScaledUnit = /** @class */ (function (_super) {
    __extends(OffsetAndScaledUnit, _super);
    function OffsetAndScaledUnit(_symbol, _name, _offset, _scale, _baseUnit) {
      var _this =
        _super.call(this, _symbol, _name, _baseUnit.quantityType) || this;
      _this._offset = _offset;
      _this._scale = _scale;
      _this._baseUnit = _baseUnit;
      return _this;
    }
    OffsetAndScaledUnit.prototype.toBaseUnit = function (value) {
      return (value + this._offset) * this._scale;
    };
    OffsetAndScaledUnit.prototype.fromBaseUnit = function (value) {
      return value / this._scale - this._offset;
    };
    return OffsetAndScaledUnit;
  })(Unit);
  // ABSORBED_DOSE Units
  units_1.GRAY = new BaseUnit('Gy', 'gray', QuantityType.ABSORBED_DOSE);
  // ACCELERATION Units
  units_1.METRES_PER_SECOND_SQUARED = new BaseUnit(
    'm/s^2',
    'metres per second squared',
    QuantityType.ACCELERATION,
  );
  units_1.FEET_PER_SECOND_SQUARED = new ScaledUnit(
    'ft/s^2',
    'feet per second squared',
    0.3048,
    units_1.METRES_PER_SECOND_SQUARED,
  );
  units_1.GRAVITY = new ScaledUnit(
    'gravity',
    'gravity',
    9.80665,
    units_1.METRES_PER_SECOND_SQUARED,
  );
  // ACIDITY Units
  units_1.MG_KOH_PER_G = new BaseUnit(
    'mg KOH/g',
    'mg koh per g',
    QuantityType.ACIDITY,
  );
  // AMOUNT_OF_SUBSTANCE Units
  units_1.MOLE = new BaseUnit('mol', 'mole', QuantityType.AMOUNT_OF_SUBSTANCE);
  // ANGLE Units
  units_1.RADIAN = new BaseUnit('rad', 'radian', QuantityType.ANGLE);
  units_1.DEGREES = new ScaledUnit(
    'deg',
    'degrees',
    0.01745329,
    units_1.RADIAN,
  );
  units_1.GRADIANS = new ScaledUnit(
    'grad',
    'gradians',
    0.01745329,
    units_1.RADIAN,
  );
  units_1.REVOLUTIONS = new ScaledUnit(
    'rev',
    'revolutions',
    6.283185307179586,
    units_1.RADIAN,
  );
  // ANGULAR_ACCELERATION Units
  units_1.RPM_PER_SECOND = new BaseUnit(
    'rpm/s',
    'rpm per second',
    QuantityType.ANGULAR_ACCELERATION,
  );
  // ANGULAR_SPEED Units
  units_1.RADIANS_PER_SECOND = new BaseUnit(
    'rad/s',
    'radians per second',
    QuantityType.ANGULAR_SPEED,
  );
  units_1.DEGREES_PER_SECOND = new ScaledUnit(
    'd/s',
    'degrees per second',
    0.01745329252,
    units_1.RADIANS_PER_SECOND,
  );
  units_1.REVOLUTIONS_PER_MINUTE = new ScaledUnit(
    'rpm',
    'revolutions per minute',
    0.1047197551,
    units_1.RADIANS_PER_SECOND,
  );
  // APPARENT_POWER Units
  units_1.VOLT_AMPERE = new BaseUnit(
    'VA',
    'volt ampere',
    QuantityType.APPARENT_POWER,
  );
  units_1.KILOVOLT_AMPERE = new ScaledUnit(
    'KVA',
    'kilovolt ampere',
    1000.0,
    units_1.VOLT_AMPERE,
  );
  // AREA Units
  units_1.SQUARE_METRES = new BaseUnit(
    'm^2',
    'square metres',
    QuantityType.AREA,
  );
  units_1.SQUARE_FEET = new ScaledUnit(
    'ft^2',
    'square feet',
    0.09290304,
    units_1.SQUARE_METRES,
  );
  units_1.SQUARE_YARDS = new ScaledUnit(
    'yd^2',
    'square yards',
    0.83612736,
    units_1.SQUARE_METRES,
  );
  units_1.SQUARE_INCHES = new ScaledUnit(
    'in^2',
    'square inches',
    6.4516e-4,
    units_1.SQUARE_METRES,
  );
  units_1.HECTARE = new ScaledUnit(
    'ha',
    'hectare',
    10000.0,
    units_1.SQUARE_METRES,
  );
  units_1.ACRE = new ScaledUnit(
    'acre',
    'acre',
    4046.856422,
    units_1.SQUARE_METRES,
  );
  units_1.SQUARE_MILES = new ScaledUnit(
    'miles^2',
    'square miles',
    2589988.11,
    units_1.SQUARE_METRES,
  );
  // BANK_VOLUME Units
  units_1.BANK_CUBIC_METRES = new BaseUnit(
    'bcm',
    'bank cubic metres',
    QuantityType.BANK_VOLUME,
  );
  units_1.BANK_CUBIC_YARDS = new ScaledUnit(
    'bcy',
    'bank cubic yards',
    0.764554858,
    units_1.BANK_CUBIC_METRES,
  );
  // BANK_VOLUME_FLOW_RATE Units
  units_1.BANK_CUBIC_METRES_PER_SECOND = new BaseUnit(
    'bcm/s',
    'bank cubic metres per second',
    QuantityType.BANK_VOLUME_FLOW_RATE,
  );
  units_1.BANK_CUBIC_METRES_PER_HOUR = new ScaledUnit(
    'bcm/hr',
    'bank cubic metres per hour',
    2.777777777777778e-4,
    units_1.BANK_CUBIC_METRES_PER_SECOND,
  );
  units_1.BANK_CUBIC_METRES_PER_MINUTE = new ScaledUnit(
    'bcms/min',
    'bank cubic metres per minute',
    0.016666666666666666,
    units_1.BANK_CUBIC_METRES_PER_SECOND,
  );
  units_1.BANK_CUBIC_YARDS_PER_MINUTE = new ScaledUnit(
    'bcy/min',
    'bank cubic yards per minute',
    0.0127425809664,
    units_1.BANK_CUBIC_METRES_PER_SECOND,
  );
  units_1.BANK_CUBIC_YARDS_PER_HOUR = new ScaledUnit(
    'bcy/hr',
    'bank cubic yards per hour',
    2.123763944e-4,
    units_1.BANK_CUBIC_METRES_PER_SECOND,
  );
  // COUNT_PER_TIME Units
  units_1.COUNT_PER_SECOND = new BaseUnit(
    '/s',
    'count per second',
    QuantityType.COUNT_PER_TIME,
  );
  units_1.COUNT_PER_MINUTE = new ScaledUnit(
    '/min',
    'count per minute',
    0.0166666666666667,
    units_1.COUNT_PER_SECOND,
  );
  units_1.COUNT_PER_HOUR = new ScaledUnit(
    '/hr',
    'count per hour',
    2.77777777778e-4,
    units_1.COUNT_PER_SECOND,
  );
  units_1.BAUD = new BaseUnit('Bd', 'baud', QuantityType.COUNT_PER_TIME);
  // CURVATURE Units
  units_1.RADIANS_PER_METRE = new BaseUnit(
    'rad/m',
    'radians per metre',
    QuantityType.CURVATURE,
  );
  units_1.DEGREES_PER_METRE = new ScaledUnit(
    'deg/m',
    'degrees per metre',
    0.01745329252,
    units_1.RADIANS_PER_METRE,
  );
  units_1.RADIANS_PER_FOOT = new ScaledUnit(
    'rad/ft',
    'radians per foot',
    3.2808399,
    units_1.RADIANS_PER_METRE,
  );
  // DENSITY Units
  units_1.KILOGRAMS_PER_CUBIC_METRE = new BaseUnit(
    'kg/m^3',
    'kilograms per cubic metre',
    QuantityType.DENSITY,
  );
  units_1.TONNES_PER_CUBIC_METRE = new ScaledUnit(
    't/m^3',
    'tonnes per cubic metre',
    1000.0,
    units_1.KILOGRAMS_PER_CUBIC_METRE,
  );
  units_1.GRAMMES_PER_CUBIC_CENTIMETRE = new ScaledUnit(
    'g/c^3',
    'grammes per cubic centimetre',
    1000.0,
    units_1.KILOGRAMS_PER_CUBIC_METRE,
  );
  units_1.POUNDS_PER_CUBIC_FOOT = new ScaledUnit(
    'lb/ft^3',
    'pounds per cubic foot',
    16.01846337,
    units_1.KILOGRAMS_PER_CUBIC_METRE,
  );
  units_1.TONS_PER_CUBIC_YARD = new ScaledUnit(
    'st/yd^3',
    'tons per cubic yard',
    1186.552843,
    units_1.KILOGRAMS_PER_CUBIC_METRE,
  );
  units_1.CUBIC_FEET_PER_TON = new ScaledUnit(
    'ft^3/st',
    'cubic feet per ton',
    0.008005343,
    units_1.KILOGRAMS_PER_CUBIC_METRE,
  );
  // ELECTRIC_CAPACITANCE Units
  units_1.FARAD = new BaseUnit('F', 'farad', QuantityType.ELECTRIC_CAPACITANCE);
  // ELECTRIC_CHARGE Units
  units_1.COULOMB = new BaseUnit('C', 'coulomb', QuantityType.ELECTRIC_CHARGE);
  // ELECTRIC_CONDUCTANCE Units
  units_1.SIEMENS = new BaseUnit(
    'S',
    'siemens',
    QuantityType.ELECTRIC_CONDUCTANCE,
  );
  // ELECTRIC_CURRENT Units
  units_1.AMPERE = new BaseUnit('A', 'ampere', QuantityType.ELECTRIC_CURRENT);
  units_1.MILLIAMPERE = new ScaledUnit(
    'mA',
    'milliampere',
    0.001,
    units_1.AMPERE,
  );
  // ELECTRIC_INDUCTANCE Units
  units_1.HENRY = new BaseUnit('H', 'henry', QuantityType.ELECTRIC_INDUCTANCE);
  // ELECTRIC_POTENTIAL Units
  units_1.VOLT = new BaseUnit('V', 'volt', QuantityType.ELECTRIC_POTENTIAL);
  units_1.MILLIVOLT = new ScaledUnit('mV', 'millivolt', 0.001, units_1.VOLT);
  // ELECTRIC_RESISTANCE Units
  units_1.OHM = new BaseUnit('Omega', 'ohm', QuantityType.ELECTRIC_RESISTANCE);
  // ENERGY Units
  units_1.JOULE = new BaseUnit('J', 'joule', QuantityType.ENERGY);
  units_1.FOOT_POUND = new ScaledUnit(
    'ft-lb',
    'foot pound',
    1.355817948,
    units_1.JOULE,
  );
  units_1.BRITISH_THERMAL_UNIT = new ScaledUnit(
    'BTU',
    'british thermal unit',
    1055.056,
    units_1.JOULE,
  );
  units_1.CALORIE = new ScaledUnit('cal', 'calorie', 4.1868, units_1.JOULE);
  units_1.KILOWATT_HOUR = new ScaledUnit(
    'kwh',
    'kilowatt hour',
    3600000.0,
    units_1.JOULE,
  );
  units_1.HORSEPOWER_HOUR = new ScaledUnit(
    'hph',
    'horsepower hour',
    2684519.54,
    units_1.JOULE,
  );
  units_1.KILOJOULE = new ScaledUnit('kJ', 'kilojoule', 1000.0, units_1.JOULE);
  units_1.MEGAJOULE = new ScaledUnit(
    'MJ',
    'megajoule',
    1000000.0,
    units_1.JOULE,
  );
  // ENERGY_PER_FUEL_BURN Units
  units_1.KILOWATT_HOUR_PER_LITRE = new BaseUnit(
    'kWh/l',
    'kilowatt hour per litre',
    QuantityType.ENERGY_PER_FUEL_BURN,
  );
  units_1.HORSEPOWER_HOUR_PER_GALLON = new ScaledUnit(
    'hph/gal',
    'horsepower hour per gallon',
    0.196993066,
    units_1.KILOWATT_HOUR_PER_LITRE,
  );
  // FORCE Units
  units_1.NEWTON = new BaseUnit('N', 'newton', QuantityType.FORCE);
  units_1.KILONEWTON = new ScaledUnit(
    'kN',
    'kilonewton',
    1000.0,
    units_1.NEWTON,
  );
  units_1.POUND_FORCE = new ScaledUnit(
    'lbf',
    'pound force',
    4.448200702815711,
    units_1.NEWTON,
  );
  // FREQUENCY Units
  units_1.HERTZ = new BaseUnit('Hz', 'hertz', QuantityType.FREQUENCY);
  units_1.KILOHERTZ = new ScaledUnit('kHz', 'kilohertz', 1000.0, units_1.HERTZ);
  // FUEL_BURN_PER_DISTANCE Units
  units_1.CUBIC_METRES_PER_METRE = new BaseUnit(
    'm^3/m',
    'cubic metres per metre',
    QuantityType.FUEL_BURN_PER_DISTANCE,
  );
  units_1.LITRES_PER_KILOMETRE = new ScaledUnit(
    'l/km',
    'litres per kilometre',
    1.0e-6,
    units_1.CUBIC_METRES_PER_METRE,
  );
  units_1.GALLONS_PER_KILOMETRE = new ScaledUnit(
    'gal/km',
    'gallons per kilometre',
    3.78541e-6,
    units_1.CUBIC_METRES_PER_METRE,
  );
  units_1.GALLONS_PER_MILE = new ScaledUnit(
    'gal/mile',
    'gallons per mile',
    2.35215e-6,
    units_1.CUBIC_METRES_PER_METRE,
  );
  // ILLUMINANCE Units
  units_1.LUX = new BaseUnit('lx', 'lux', QuantityType.ILLUMINANCE);
  // INDEX Units
  units_1.INDEX = new BaseUnit('index', 'index', QuantityType.INDEX);
  units_1.POSITION_INDEX = new BaseUnit(
    'pos',
    'position index',
    QuantityType.INDEX,
  );
  units_1.GEAR = new BaseUnit('gear', 'gear', QuantityType.INDEX);
  // LATITUDE Units
  units_1.DEGREES_OF_LATITUDE = new BaseUnit(
    'Lat',
    'degrees of latitude',
    QuantityType.LATITUDE,
  );
  // LENGTH Units
  units_1.METRE = new BaseUnit('m', 'metre', QuantityType.LENGTH);
  units_1.FOOT = new ScaledUnit('ft', 'foot', 0.3048, units_1.METRE);
  units_1.SURFOOT = new ScaledUnit(
    'sft',
    'surfoot',
    0.304800609601,
    units_1.METRE,
  );
  units_1.INCH = new ScaledUnit('in', 'inch', 0.0254, units_1.METRE);
  units_1.MILE = new ScaledUnit('mile', 'mile', 1609.344, units_1.METRE);
  units_1.YARD = new ScaledUnit('yd', 'yard', 0.9144, units_1.METRE);
  units_1.KILOMETRE = new ScaledUnit('km', 'kilometre', 1000.0, units_1.METRE);
  units_1.MILLIMETRE = new ScaledUnit('mm', 'millimetre', 0.001, units_1.METRE);
  units_1.CENTIMETRE = new ScaledUnit('cm', 'centimetre', 0.01, units_1.METRE);
  units_1.CUBIT = new ScaledUnit('c', 'cubit', 0.4572, units_1.METRE);
  units_1.SMOOT = new ScaledUnit('smoot', 'smoot', 1.7018, units_1.METRE);
  // LIQUID_VOLUME Units
  units_1.LITRE = new BaseUnit('l', 'litre', QuantityType.LIQUID_VOLUME);
  units_1.GALLON = new ScaledUnit('gal', 'gallon', 3.78541, units_1.LITRE);
  units_1.QUART = new ScaledUnit('qt', 'quart', 0.9463525, units_1.LITRE);
  units_1.PINT = new ScaledUnit('pint', 'pint', 0.47317625, units_1.LITRE);
  // LIQUID_VOLUME_PER_AREA Units
  units_1.LITRES_PER_SQUARE_METRE = new BaseUnit(
    'l/m^2',
    'litres per square metre',
    QuantityType.LIQUID_VOLUME_PER_AREA,
  );
  units_1.GALLONS_PER_SQUARE_FOOT = new ScaledUnit(
    'gal/ft^2',
    'gallons per square foot',
    40.7458333333,
    units_1.LITRES_PER_SQUARE_METRE,
  );
  // LOAD Units
  units_1.LOADS = new BaseUnit('ld', 'loads', QuantityType.LOAD);
  // LOAD_RATE Units
  units_1.LOADS_PER_SECOND = new BaseUnit(
    'ld/s',
    'loads per second',
    QuantityType.LOAD_RATE,
  );
  units_1.LOADS_PER_MINUTE = new ScaledUnit(
    'ld/min',
    'loads per minute',
    0.0166666666666667,
    units_1.LOADS_PER_SECOND,
  );
  units_1.LOADS_PER_HOUR = new ScaledUnit(
    'ld/hr',
    'loads per hour',
    2.77777777778e-4,
    units_1.LOADS_PER_SECOND,
  );
  // LONGITUDE Units
  units_1.DEGREES_OF_LONGITUDE = new BaseUnit(
    'Long',
    'degrees of longitude',
    QuantityType.LONGITUDE,
  );
  // LOOSE_VOLUME Units
  units_1.LOOSE_CUBIC_METRES = new BaseUnit(
    'lcm',
    'loose cubic metres',
    QuantityType.LOOSE_VOLUME,
  );
  units_1.LOOSE_CUBIC_YARDS = new ScaledUnit(
    'lcy',
    'loose cubic yards',
    0.764554858,
    units_1.LOOSE_CUBIC_METRES,
  );
  // LOOSE_VOLUME_FLOW_RATE Units
  units_1.LOOSE_CUBIC_METRES_PER_SECOND = new BaseUnit(
    'lcm/s',
    'loose cubic metres per second',
    QuantityType.LOOSE_VOLUME_FLOW_RATE,
  );
  units_1.LOOSE_CUBIC_METRES_PER_HOUR = new ScaledUnit(
    'lcm/hr',
    'loose cubic metres per hour',
    2.777777777777778e-4,
    units_1.LOOSE_CUBIC_METRES_PER_SECOND,
  );
  units_1.LOOSE_CUBIC_METRES_PER_MINUTE = new ScaledUnit(
    'lcms/min',
    'loose cubic metres per minute',
    0.016666666666666666,
    units_1.LOOSE_CUBIC_METRES_PER_SECOND,
  );
  units_1.LOOSE_CUBIC_YARDS_PER_MINUTE = new ScaledUnit(
    'lcy/min',
    'loose cubic yards per minute',
    0.0127425809664,
    units_1.LOOSE_CUBIC_METRES_PER_SECOND,
  );
  units_1.LOOSE_CUBIC_YARDS_PER_HOUR = new ScaledUnit(
    'lcy/hr',
    'loose cubic yards per hour',
    2.123763944e-4,
    units_1.LOOSE_CUBIC_METRES_PER_SECOND,
  );
  // LUMINOUS_FLUX Units
  units_1.LUMEN = new BaseUnit('lm', 'lumen', QuantityType.LUMINOUS_FLUX);
  // LUMINOUS_INTENSITY Units
  units_1.CANDELA = new BaseUnit(
    'cd',
    'candela',
    QuantityType.LUMINOUS_INTENSITY,
  );
  // MAGNETIC_FLUX Units
  units_1.WEBER = new BaseUnit('Wb', 'weber', QuantityType.MAGNETIC_FLUX);
  // MAGNETIC_FLUX_DENSITY Units
  units_1.TESLA = new BaseUnit(
    'T',
    'tesla',
    QuantityType.MAGNETIC_FLUX_DENSITY,
  );
  // MASS Units
  units_1.KILOGRAM = new BaseUnit('kg', 'kilogram', QuantityType.MASS);
  units_1.MILLIGRAM = new ScaledUnit(
    'mg',
    'milligram',
    1.0e-6,
    units_1.KILOGRAM,
  );
  units_1.GRAM = new ScaledUnit('g', 'gram', 0.001, units_1.KILOGRAM);
  units_1.POUND = new ScaledUnit('lb', 'pound', 0.4535924, units_1.KILOGRAM);
  units_1.CARAT = new ScaledUnit('k', 'carat', 2.0e-4, units_1.KILOGRAM);
  units_1.OUNCE = new ScaledUnit(
    'oz',
    'ounce',
    0.02834952313,
    units_1.KILOGRAM,
  );
  units_1.OUNCETROY = new ScaledUnit(
    'ozT',
    'ounceTroy',
    0.0311034768,
    units_1.KILOGRAM,
  );
  units_1.TON = new ScaledUnit('ton', 'ton', 907.18474, units_1.KILOGRAM);
  units_1.TONNE = new ScaledUnit('t', 'tonne', 1000.0, units_1.KILOGRAM);
  units_1.KILOTONNE = new ScaledUnit(
    'kt',
    'kilotonne',
    1000000.0,
    units_1.KILOGRAM,
  );
  units_1.KILOTON = new ScaledUnit(
    'kton',
    'kiloton',
    907184.741,
    units_1.KILOGRAM,
  );
  // MASS_DISTANCE Units
  units_1.KILOGRAM_METRE = new BaseUnit(
    'kgm',
    'kilogram metre',
    QuantityType.MASS_DISTANCE,
  );
  units_1.TONNE_KILOMETRE = new ScaledUnit(
    'tkm',
    'tonne kilometre',
    1000000.0,
    units_1.KILOGRAM_METRE,
  );
  units_1.TON_MILE = new ScaledUnit(
    'ton.mile',
    'ton mile',
    1459972.31821056,
    units_1.KILOGRAM_METRE,
  );
  // MASS_FLOW_RATE Units
  units_1.KILOGRAMS_PER_SECOND = new BaseUnit(
    'kg/s',
    'kilograms per second',
    QuantityType.MASS_FLOW_RATE,
  );
  units_1.KILOGRAMS_PER_HOUR = new ScaledUnit(
    'kg/hr',
    'kilograms per hour',
    2.777777777777778e-4,
    units_1.KILOGRAMS_PER_SECOND,
  );
  units_1.KILOGRAMS_PER_MINUTE = new ScaledUnit(
    'kg/min',
    'kilograms per minute',
    0.0166666667,
    units_1.KILOGRAMS_PER_SECOND,
  );
  units_1.TONS_PER_SECOND = new ScaledUnit(
    'ton/s',
    'tons per second',
    907.18474,
    units_1.KILOGRAMS_PER_SECOND,
  );
  units_1.POUNDS_PER_MINUTE = new ScaledUnit(
    'lb/min',
    'pounds per minute',
    0.00755987283,
    units_1.KILOGRAMS_PER_SECOND,
  );
  units_1.POUNDS_PER_HOUR = new ScaledUnit(
    'lb/hr',
    'pounds per hour',
    1.25997881e-4,
    units_1.KILOGRAMS_PER_SECOND,
  );
  units_1.TONS_PER_HOUR = new ScaledUnit(
    'ton/hr',
    'tons per hour',
    0.2519956,
    units_1.KILOGRAMS_PER_SECOND,
  );
  units_1.TONNES_PER_SECOND = new ScaledUnit(
    't/s',
    'tonnes per second',
    1000.0,
    units_1.KILOGRAMS_PER_SECOND,
  );
  units_1.TONNES_PER_HOUR = new ScaledUnit(
    't/hr',
    'tonnes per hour',
    0.2777778,
    units_1.KILOGRAMS_PER_SECOND,
  );
  // MASS_SPEED Units
  units_1.KILOGRAM_METRE_PER_SECOND = new BaseUnit(
    'kgmps',
    'kilogram metre per second',
    QuantityType.MASS_SPEED,
  );
  units_1.TON_MILE_PER_HOUR = new ScaledUnit(
    'tmph',
    'ton mile per hour',
    405.5478661696,
    units_1.KILOGRAM_METRE_PER_SECOND,
  );
  units_1.TONNE_KILOMETRE_PER_HOUR = new ScaledUnit(
    'tkph',
    'tonne kilometre per hour',
    277.77777777777777,
    units_1.KILOGRAM_METRE_PER_SECOND,
  );
  // PARTS_PER_PARTS Units
  units_1.PARTS_PER_MILLION = new BaseUnit(
    'ppm',
    'parts per million',
    QuantityType.PARTS_PER_PARTS,
  );
  units_1.PARTS_PER_BILLION = new ScaledUnit(
    'ppb',
    'parts per billion',
    1000.0,
    units_1.PARTS_PER_MILLION,
  );
  // POWER Units
  units_1.WATT = new BaseUnit('W', 'watt', QuantityType.POWER);
  units_1.POUND_FOOT_PER_HOUR = new ScaledUnit(
    'lb-ft/hr',
    'pound foot per hour',
    3.766160968e-4,
    units_1.WATT,
  );
  units_1.HORSEPOWER = new ScaledUnit(
    'hp',
    'horsepower',
    745.6998716,
    units_1.WATT,
  );
  units_1.KILOWATT = new ScaledUnit('kW', 'kilowatt', 1000.0, units_1.WATT);
  // PRESSURE Units
  units_1.PASCAL = new BaseUnit('Pa', 'pascal', QuantityType.PRESSURE);
  units_1.KILOPASCAL = new ScaledUnit(
    'kPa',
    'kilopascal',
    1000.0,
    units_1.PASCAL,
  );
  units_1.MEGAPASCAL = new ScaledUnit(
    'MPa',
    'megapascal',
    1000000.0,
    units_1.PASCAL,
  );
  units_1.ATMOSPHERE = new ScaledUnit(
    'atm',
    'atmosphere',
    0.0098692327,
    units_1.PASCAL,
  );
  units_1.BAR = new ScaledUnit('bar', 'bar', 100000.0, units_1.PASCAL);
  units_1.POUNDS_PER_SQUARE_INCH = new ScaledUnit(
    'psi',
    'pounds per square inch',
    6894.757293,
    units_1.PASCAL,
  );
  units_1.MM_OF_MERCURY = new ScaledUnit(
    'mm of Hg',
    'mm of mercury',
    7.5006168,
    units_1.PASCAL,
  );
  units_1.INCH_OF_WATER = new ScaledUnit(
    'inH2O',
    'inch of water',
    0.00401463,
    units_1.PASCAL,
  );
  units_1.INCH_OF_MERCURY = new ScaledUnit(
    'inHg',
    'inch of mercury',
    2.953e-4,
    units_1.PASCAL,
  );
  // QUANTITY Units
  units_1.COUNT = new BaseUnit('n', 'count', QuantityType.QUANTITY);
  units_1.TENS = new ScaledUnit('Te', 'tens', 0.1, units_1.COUNT);
  units_1.HUNDREDS = new ScaledUnit('Hu', 'hundreds', 0.01, units_1.COUNT);
  units_1.THOUSANDS = new ScaledUnit('Th', 'thousands', 0.001, units_1.COUNT);
  units_1.TEN_THOUSANDS = new ScaledUnit(
    'TTh',
    'ten thousands',
    1.0e-4,
    units_1.COUNT,
  );
  units_1.HUNDRED_THOUSANDS = new ScaledUnit(
    'HTh',
    'hundred thousands',
    1.0e-5,
    units_1.COUNT,
  );
  units_1.MILLIONS = new ScaledUnit('Mi', 'millions', 1.0e-6, units_1.COUNT);
  // RADIOACTIVITY Units
  units_1.BECQUEREL = new BaseUnit(
    'Bq',
    'becquerel',
    QuantityType.RADIOACTIVITY,
  );
  // RATIO Units
  units_1.PERCENT = new BaseUnit('%', 'percent', QuantityType.RATIO);
  units_1.GRAMS_PER_SHORT_TON = new ScaledUnit(
    'g/st',
    'grams per short ton',
    1.102311311e-4,
    units_1.PERCENT,
  );
  units_1.KILOGRAMS_PER_TONNE = new ScaledUnit(
    'kg/t',
    'kilograms per tonne',
    0.1,
    units_1.PERCENT,
  );
  units_1.OUNCES_PER_SHORT_TON = new ScaledUnit(
    'oz/st',
    'ounces per short ton',
    0.003125,
    units_1.PERCENT,
  );
  units_1.OUNCESTROY_PER_SHORT_TON = new ScaledUnit(
    'ozT/st',
    'ouncesTroy per short ton',
    0.00342857143,
    units_1.PERCENT,
  );
  units_1.GRAMS_PER_TONNE = new ScaledUnit(
    'g/t',
    'grams per tonne',
    1.0e-4,
    units_1.PERCENT,
  );
  units_1.RELATIVE = new ScaledUnit('rel', 'relative', 100.0, units_1.PERCENT);
  // REACTIVE_POWER Units
  units_1.VOLT_AMPERE_REACTIVE = new BaseUnit(
    'var',
    'volt ampere reactive',
    QuantityType.REACTIVE_POWER,
  );
  units_1.KILOVOLT_AMPERE_REACTIVE = new ScaledUnit(
    'kvar',
    'kilovolt ampere reactive',
    1000.0,
    units_1.VOLT_AMPERE_REACTIVE,
  );
  // SCREEN_RESOLUTION Units
  units_1.PIXELS_PER_METRE = new BaseUnit(
    'px/m',
    'pixels per metre',
    QuantityType.SCREEN_RESOLUTION,
  );
  // SCREEN_WIDTH Units
  units_1.PIXEL = new BaseUnit('px', 'pixel', QuantityType.SCREEN_WIDTH);
  // SIGNAL_STRENGTH Units
  units_1.DBM = new BaseUnit('dBm', 'dbm', QuantityType.SIGNAL_STRENGTH);
  // SOLID_ANGLE Units
  units_1.STERADIAN = new BaseUnit('sr', 'steradian', QuantityType.SOLID_ANGLE);
  // SPEED Units
  units_1.METRES_PER_SECOND = new BaseUnit(
    'm/s',
    'metres per second',
    QuantityType.SPEED,
  );
  units_1.FEET_PER_SECOND = new ScaledUnit(
    'feet/sec',
    'feet per second',
    0.3048,
    units_1.METRES_PER_SECOND,
  );
  units_1.FEET_PER_MINUTE = new ScaledUnit(
    'feet/min',
    'feet per minute',
    0.00508,
    units_1.METRES_PER_SECOND,
  );
  units_1.FEET_PER_HOUR = new ScaledUnit(
    'feet/hr',
    'feet per hour',
    8.46666667e-5,
    units_1.METRES_PER_SECOND,
  );
  units_1.MILLIMETRES_PER_SECOND = new ScaledUnit(
    'mm/s',
    'millimetres per second',
    0.001,
    units_1.METRES_PER_SECOND,
  );
  units_1.INCHES_PER_SECOND = new ScaledUnit(
    'in/s',
    'inches per second',
    0.0254,
    units_1.METRES_PER_SECOND,
  );
  units_1.KILOMETRES_PER_HOUR = new ScaledUnit(
    'kph',
    'kilometres per hour',
    0.2777777778,
    units_1.METRES_PER_SECOND,
  );
  units_1.KILOMETRES_PER_SECOND = new ScaledUnit(
    'kps',
    'kilometres per second',
    1000.0,
    units_1.METRES_PER_SECOND,
  );
  units_1.METRES_PER_MINUTE = new ScaledUnit(
    'mtpm',
    'metres per minute',
    0.0166666666666667,
    units_1.METRES_PER_SECOND,
  );
  units_1.METRES_PER_HOUR = new ScaledUnit(
    'mtph',
    'metres per hour',
    2.777777778e-4,
    units_1.METRES_PER_SECOND,
  );
  units_1.MILES_PER_HOUR = new ScaledUnit(
    'mph',
    'miles per hour',
    0.44704,
    units_1.METRES_PER_SECOND,
  );
  units_1.KNOTS = new ScaledUnit(
    'kn',
    'knots',
    1.94384449,
    units_1.METRES_PER_SECOND,
  );
  // STORAGE Units
  units_1.BYTE = new BaseUnit('B', 'byte', QuantityType.STORAGE);
  units_1.BIT = new ScaledUnit('b', 'bit', 0.125, units_1.BYTE);
  units_1.KILOBYTE = new ScaledUnit('kB', 'kilobyte', 1024.0, units_1.BYTE);
  units_1.MEGABYTE = new ScaledUnit('MB', 'megabyte', 1048576.0, units_1.BYTE);
  units_1.GIGABYTE = new ScaledUnit(
    'GB',
    'gigabyte',
    1.073741824e9,
    units_1.BYTE,
  );
  units_1.TERABYTE = new ScaledUnit(
    'TB',
    'terabyte',
    1.099511627776e12,
    units_1.BYTE,
  );
  units_1.PETABYTE = new ScaledUnit(
    'PB',
    'petabyte',
    1.125899906842624e15,
    units_1.BYTE,
  );
  units_1.EXABYTE = new ScaledUnit(
    'EB',
    'exabyte',
    1.15292150460684698e18,
    units_1.BYTE,
  );
  // TEMPERATURE Units
  units_1.KELVIN = new BaseUnit('K', 'kelvin', QuantityType.TEMPERATURE);
  units_1.CELSIUS = new OffsetUnit(
    '\u00B0C',
    'celsius',
    273.15,
    units_1.KELVIN,
  );
  units_1.FAHRENHEIT = new ScaledAndOffsetUnit(
    '\u00B0F',
    'fahrenheit',
    0.55555555555555,
    459.67,
    units_1.KELVIN,
  );
  // TIME Units
  units_1.SECOND = new BaseUnit('s', 'second', QuantityType.TIME);
  units_1.MILLISECOND = new ScaledUnit(
    'ms',
    'millisecond',
    0.001,
    units_1.SECOND,
  );
  units_1.MICROSECOND = new ScaledUnit(
    'us',
    'microsecond',
    1.0e-6,
    units_1.SECOND,
  );
  units_1.MINUTE = new ScaledUnit('min', 'minute', 60.0, units_1.SECOND);
  units_1.HOUR = new ScaledUnit('hr', 'hour', 3600.0, units_1.SECOND);
  units_1.DAY = new ScaledUnit('day', 'day', 86400.0, units_1.SECOND);
  // TORQUE Units
  units_1.NEWTON_METRE = new BaseUnit(
    'Nm',
    'newton metre',
    QuantityType.TORQUE,
  );
  units_1.KILONEWTON_METRE = new ScaledUnit(
    'kNm',
    'kilonewton metre',
    1000.0,
    units_1.NEWTON_METRE,
  );
  units_1.INCH_POUNDS = new ScaledUnit(
    'lb in',
    'inch pounds',
    0.112984829,
    units_1.NEWTON_METRE,
  );
  units_1.FOOT_POUNDS = new ScaledUnit(
    'lb ft',
    'foot pounds',
    1.35581795,
    units_1.NEWTON_METRE,
  );
  // UNITLESS Units
  units_1.ONE = new BaseUnit('1', 'one', QuantityType.UNITLESS);
  // VISCOSITY Units
  units_1.PASCAL_SECOND = new BaseUnit(
    'Pa.s',
    'pascal second',
    QuantityType.VISCOSITY,
  );
  // VOLUME Units
  units_1.CUBIC_METRES = new BaseUnit(
    'm^3',
    'cubic metres',
    QuantityType.VOLUME,
  );
  units_1.KILO_CUBIC_METRES = new ScaledUnit(
    'k m^3',
    'kilo cubic metres',
    1000.0,
    units_1.CUBIC_METRES,
  );
  units_1.CUBIC_FEET = new ScaledUnit(
    'ft^3',
    'cubic feet',
    0.02831684659,
    units_1.CUBIC_METRES,
  );
  units_1.CUBIC_YARDS = new ScaledUnit(
    'yd^3',
    'cubic yards',
    0.764554858,
    units_1.CUBIC_METRES,
  );
  units_1.CUBIC_INCH = new ScaledUnit(
    'in^3',
    'cubic inch',
    1.6387064e-5,
    units_1.CUBIC_METRES,
  );
  units_1.CUBIC_CENTIMETRES = new ScaledUnit(
    'cc',
    'cubic centimetres',
    1.0e-6,
    units_1.CUBIC_METRES,
  );
  units_1.CUBIC_MILLIMETRES = new ScaledUnit(
    'mm3',
    'cubic millimetres',
    1.0e-9,
    units_1.CUBIC_METRES,
  );
  // VOLUMETRIC_FLOW_RATE Units
  units_1.CUBIC_METRES_PER_SECOND = new BaseUnit(
    'm^3/s',
    'cubic metres per second',
    QuantityType.VOLUMETRIC_FLOW_RATE,
  );
  units_1.CUBIC_METRES_PER_HOUR = new ScaledUnit(
    'm^3/hr',
    'cubic metres per hour',
    3600.0,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.STANDARD_CUBIC_METRES_PER_HOUR = new ScaledUnit(
    'Nm3/hr',
    'standard cubic metres per hour',
    3600.0,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.LITRES_PER_SECOND = new ScaledUnit(
    'l/s',
    'litres per second',
    0.001,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.LITRES_PER_MINUTE = new ScaledUnit(
    'l/min',
    'litres per minute',
    1.6666666666666667e-5,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.LITRES_PER_HOUR = new ScaledUnit(
    'l/hr',
    'litres per hour',
    2.7777777777777776e-7,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.GALLONS_PER_SECOND = new ScaledUnit(
    'gps',
    'gallons per second',
    0.0037854117891320312,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.GALLONS_PER_MINUTE = new ScaledUnit(
    'gpm',
    'gallons per minute',
    6.30901964e-5,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.GALLONS_PER_HOUR = new ScaledUnit(
    'gph',
    'gallons per hour',
    1.05150327e-6,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.CUBIC_FEET_PER_MINUTE = new ScaledUnit(
    'fpm',
    'cubic feet per minute',
    4.719474432e-4,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.STANDARD_CUBIC_FEET_PER_MINUTE = new ScaledUnit(
    'scfm',
    'standard cubic feet per minute',
    4.719474432e-4,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.CUBIC_FEET_PER_SECOND = new ScaledUnit(
    'fps',
    'cubic feet per second',
    0.02831684659,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.CUBIC_INCHES_PER_SECOND = new ScaledUnit(
    'in^3/s',
    'cubic inches per second',
    1.6387064e-5,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  units_1.CUBIC_CENTREMETRES_PER_SECOND = new ScaledUnit(
    'cm^3/s',
    'cubic centremetres per second',
    1.0e-6,
    units_1.CUBIC_METRES_PER_SECOND,
  );
  // Map of Unit.symbol/name -> Unit
  var UNITS_BY_SYMBOL_AND_NAME = {};
  UNITS_BY_SYMBOL_AND_NAME[units_1.ACRE.symbol] = units_1.ACRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.ACRE.name] = units_1.ACRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.AMPERE.symbol] = units_1.AMPERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.AMPERE.name] = units_1.AMPERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.ATMOSPHERE.symbol] = units_1.ATMOSPHERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.ATMOSPHERE.name] = units_1.ATMOSPHERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_METRES.symbol] =
    units_1.BANK_CUBIC_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_METRES.name] =
    units_1.BANK_CUBIC_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_METRES_PER_HOUR.symbol] =
    units_1.BANK_CUBIC_METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_METRES_PER_HOUR.name] =
    units_1.BANK_CUBIC_METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_METRES_PER_MINUTE.symbol] =
    units_1.BANK_CUBIC_METRES_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_METRES_PER_MINUTE.name] =
    units_1.BANK_CUBIC_METRES_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_METRES_PER_SECOND.symbol] =
    units_1.BANK_CUBIC_METRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_METRES_PER_SECOND.name] =
    units_1.BANK_CUBIC_METRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_YARDS.symbol] =
    units_1.BANK_CUBIC_YARDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_YARDS.name] =
    units_1.BANK_CUBIC_YARDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_YARDS_PER_HOUR.symbol] =
    units_1.BANK_CUBIC_YARDS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_YARDS_PER_HOUR.name] =
    units_1.BANK_CUBIC_YARDS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_YARDS_PER_MINUTE.symbol] =
    units_1.BANK_CUBIC_YARDS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BANK_CUBIC_YARDS_PER_MINUTE.name] =
    units_1.BANK_CUBIC_YARDS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BAR.symbol] = units_1.BAR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BAR.name] = units_1.BAR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BAUD.symbol] = units_1.BAUD;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BAUD.name] = units_1.BAUD;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BECQUEREL.symbol] = units_1.BECQUEREL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BECQUEREL.name] = units_1.BECQUEREL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BIT.symbol] = units_1.BIT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BIT.name] = units_1.BIT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BRITISH_THERMAL_UNIT.symbol] =
    units_1.BRITISH_THERMAL_UNIT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BRITISH_THERMAL_UNIT.name] =
    units_1.BRITISH_THERMAL_UNIT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BYTE.symbol] = units_1.BYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.BYTE.name] = units_1.BYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CALORIE.symbol] = units_1.CALORIE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CALORIE.name] = units_1.CALORIE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CANDELA.symbol] = units_1.CANDELA;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CANDELA.name] = units_1.CANDELA;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CARAT.symbol] = units_1.CARAT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CARAT.name] = units_1.CARAT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CELSIUS.symbol] = units_1.CELSIUS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CELSIUS.name] = units_1.CELSIUS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CENTIMETRE.symbol] = units_1.CENTIMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CENTIMETRE.name] = units_1.CENTIMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COULOMB.symbol] = units_1.COULOMB;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COULOMB.name] = units_1.COULOMB;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COUNT.symbol] = units_1.COUNT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COUNT.name] = units_1.COUNT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COUNT_PER_HOUR.symbol] =
    units_1.COUNT_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COUNT_PER_HOUR.name] =
    units_1.COUNT_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COUNT_PER_MINUTE.symbol] =
    units_1.COUNT_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COUNT_PER_MINUTE.name] =
    units_1.COUNT_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COUNT_PER_SECOND.symbol] =
    units_1.COUNT_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.COUNT_PER_SECOND.name] =
    units_1.COUNT_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_CENTIMETRES.symbol] =
    units_1.CUBIC_CENTIMETRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_CENTIMETRES.name] =
    units_1.CUBIC_CENTIMETRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_CENTREMETRES_PER_SECOND.symbol] =
    units_1.CUBIC_CENTREMETRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_CENTREMETRES_PER_SECOND.name] =
    units_1.CUBIC_CENTREMETRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_FEET.symbol] = units_1.CUBIC_FEET;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_FEET.name] = units_1.CUBIC_FEET;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_FEET_PER_MINUTE.symbol] =
    units_1.CUBIC_FEET_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_FEET_PER_MINUTE.name] =
    units_1.CUBIC_FEET_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_FEET_PER_SECOND.symbol] =
    units_1.CUBIC_FEET_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_FEET_PER_SECOND.name] =
    units_1.CUBIC_FEET_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_FEET_PER_TON.symbol] =
    units_1.CUBIC_FEET_PER_TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_FEET_PER_TON.name] =
    units_1.CUBIC_FEET_PER_TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_INCH.symbol] = units_1.CUBIC_INCH;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_INCH.name] = units_1.CUBIC_INCH;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_INCHES_PER_SECOND.symbol] =
    units_1.CUBIC_INCHES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_INCHES_PER_SECOND.name] =
    units_1.CUBIC_INCHES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_METRES.symbol] = units_1.CUBIC_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_METRES.name] = units_1.CUBIC_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_METRES_PER_HOUR.symbol] =
    units_1.CUBIC_METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_METRES_PER_HOUR.name] =
    units_1.CUBIC_METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_METRES_PER_METRE.symbol] =
    units_1.CUBIC_METRES_PER_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_METRES_PER_METRE.name] =
    units_1.CUBIC_METRES_PER_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_METRES_PER_SECOND.symbol] =
    units_1.CUBIC_METRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_METRES_PER_SECOND.name] =
    units_1.CUBIC_METRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_MILLIMETRES.symbol] =
    units_1.CUBIC_MILLIMETRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_MILLIMETRES.name] =
    units_1.CUBIC_MILLIMETRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_YARDS.symbol] = units_1.CUBIC_YARDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIC_YARDS.name] = units_1.CUBIC_YARDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIT.symbol] = units_1.CUBIT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.CUBIT.name] = units_1.CUBIT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DAY.symbol] = units_1.DAY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DAY.name] = units_1.DAY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DBM.symbol] = units_1.DBM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DBM.name] = units_1.DBM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES.symbol] = units_1.DEGREES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES.name] = units_1.DEGREES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES_OF_LATITUDE.symbol] =
    units_1.DEGREES_OF_LATITUDE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES_OF_LATITUDE.name] =
    units_1.DEGREES_OF_LATITUDE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES_OF_LONGITUDE.symbol] =
    units_1.DEGREES_OF_LONGITUDE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES_OF_LONGITUDE.name] =
    units_1.DEGREES_OF_LONGITUDE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES_PER_METRE.symbol] =
    units_1.DEGREES_PER_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES_PER_METRE.name] =
    units_1.DEGREES_PER_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES_PER_SECOND.symbol] =
    units_1.DEGREES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.DEGREES_PER_SECOND.name] =
    units_1.DEGREES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.EXABYTE.symbol] = units_1.EXABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.EXABYTE.name] = units_1.EXABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FAHRENHEIT.symbol] = units_1.FAHRENHEIT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FAHRENHEIT.name] = units_1.FAHRENHEIT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FARAD.symbol] = units_1.FARAD;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FARAD.name] = units_1.FARAD;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FEET_PER_HOUR.symbol] =
    units_1.FEET_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FEET_PER_HOUR.name] = units_1.FEET_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FEET_PER_MINUTE.symbol] =
    units_1.FEET_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FEET_PER_MINUTE.name] =
    units_1.FEET_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FEET_PER_SECOND.symbol] =
    units_1.FEET_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FEET_PER_SECOND.name] =
    units_1.FEET_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FEET_PER_SECOND_SQUARED.symbol] =
    units_1.FEET_PER_SECOND_SQUARED;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FEET_PER_SECOND_SQUARED.name] =
    units_1.FEET_PER_SECOND_SQUARED;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FOOT.symbol] = units_1.FOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FOOT.name] = units_1.FOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FOOT_POUND.symbol] = units_1.FOOT_POUND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FOOT_POUND.name] = units_1.FOOT_POUND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FOOT_POUNDS.symbol] = units_1.FOOT_POUNDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.FOOT_POUNDS.name] = units_1.FOOT_POUNDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLON.symbol] = units_1.GALLON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLON.name] = units_1.GALLON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_HOUR.symbol] =
    units_1.GALLONS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_HOUR.name] =
    units_1.GALLONS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_KILOMETRE.symbol] =
    units_1.GALLONS_PER_KILOMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_KILOMETRE.name] =
    units_1.GALLONS_PER_KILOMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_MILE.symbol] =
    units_1.GALLONS_PER_MILE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_MILE.name] =
    units_1.GALLONS_PER_MILE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_MINUTE.symbol] =
    units_1.GALLONS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_MINUTE.name] =
    units_1.GALLONS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_SECOND.symbol] =
    units_1.GALLONS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_SECOND.name] =
    units_1.GALLONS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_SQUARE_FOOT.symbol] =
    units_1.GALLONS_PER_SQUARE_FOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GALLONS_PER_SQUARE_FOOT.name] =
    units_1.GALLONS_PER_SQUARE_FOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GEAR.symbol] = units_1.GEAR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GEAR.name] = units_1.GEAR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GIGABYTE.symbol] = units_1.GIGABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GIGABYTE.name] = units_1.GIGABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRADIANS.symbol] = units_1.GRADIANS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRADIANS.name] = units_1.GRADIANS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAM.symbol] = units_1.GRAM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAM.name] = units_1.GRAM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAMMES_PER_CUBIC_CENTIMETRE.symbol] =
    units_1.GRAMMES_PER_CUBIC_CENTIMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAMMES_PER_CUBIC_CENTIMETRE.name] =
    units_1.GRAMMES_PER_CUBIC_CENTIMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAMS_PER_SHORT_TON.symbol] =
    units_1.GRAMS_PER_SHORT_TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAMS_PER_SHORT_TON.name] =
    units_1.GRAMS_PER_SHORT_TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAMS_PER_TONNE.symbol] =
    units_1.GRAMS_PER_TONNE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAMS_PER_TONNE.name] =
    units_1.GRAMS_PER_TONNE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAVITY.symbol] = units_1.GRAVITY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAVITY.name] = units_1.GRAVITY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAY.symbol] = units_1.GRAY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.GRAY.name] = units_1.GRAY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HECTARE.symbol] = units_1.HECTARE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HECTARE.name] = units_1.HECTARE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HENRY.symbol] = units_1.HENRY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HENRY.name] = units_1.HENRY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HERTZ.symbol] = units_1.HERTZ;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HERTZ.name] = units_1.HERTZ;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HORSEPOWER.symbol] = units_1.HORSEPOWER;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HORSEPOWER.name] = units_1.HORSEPOWER;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HORSEPOWER_HOUR.symbol] =
    units_1.HORSEPOWER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HORSEPOWER_HOUR.name] =
    units_1.HORSEPOWER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HORSEPOWER_HOUR_PER_GALLON.symbol] =
    units_1.HORSEPOWER_HOUR_PER_GALLON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HORSEPOWER_HOUR_PER_GALLON.name] =
    units_1.HORSEPOWER_HOUR_PER_GALLON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HOUR.symbol] = units_1.HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HOUR.name] = units_1.HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HUNDRED_THOUSANDS.symbol] =
    units_1.HUNDRED_THOUSANDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HUNDRED_THOUSANDS.name] =
    units_1.HUNDRED_THOUSANDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HUNDREDS.symbol] = units_1.HUNDREDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.HUNDREDS.name] = units_1.HUNDREDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCH.symbol] = units_1.INCH;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCH.name] = units_1.INCH;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCH_OF_MERCURY.symbol] =
    units_1.INCH_OF_MERCURY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCH_OF_MERCURY.name] =
    units_1.INCH_OF_MERCURY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCH_OF_WATER.symbol] =
    units_1.INCH_OF_WATER;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCH_OF_WATER.name] = units_1.INCH_OF_WATER;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCH_POUNDS.symbol] = units_1.INCH_POUNDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCH_POUNDS.name] = units_1.INCH_POUNDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCHES_PER_SECOND.symbol] =
    units_1.INCHES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INCHES_PER_SECOND.name] =
    units_1.INCHES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INDEX.symbol] = units_1.INDEX;
  UNITS_BY_SYMBOL_AND_NAME[units_1.INDEX.name] = units_1.INDEX;
  UNITS_BY_SYMBOL_AND_NAME[units_1.JOULE.symbol] = units_1.JOULE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.JOULE.name] = units_1.JOULE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KELVIN.symbol] = units_1.KELVIN;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KELVIN.name] = units_1.KELVIN;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILO_CUBIC_METRES.symbol] =
    units_1.KILO_CUBIC_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILO_CUBIC_METRES.name] =
    units_1.KILO_CUBIC_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOBYTE.symbol] = units_1.KILOBYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOBYTE.name] = units_1.KILOBYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAM.symbol] = units_1.KILOGRAM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAM.name] = units_1.KILOGRAM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAM_METRE.symbol] =
    units_1.KILOGRAM_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAM_METRE.name] =
    units_1.KILOGRAM_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAM_METRE_PER_SECOND.symbol] =
    units_1.KILOGRAM_METRE_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAM_METRE_PER_SECOND.name] =
    units_1.KILOGRAM_METRE_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_CUBIC_METRE.symbol] =
    units_1.KILOGRAMS_PER_CUBIC_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_CUBIC_METRE.name] =
    units_1.KILOGRAMS_PER_CUBIC_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_HOUR.symbol] =
    units_1.KILOGRAMS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_HOUR.name] =
    units_1.KILOGRAMS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_MINUTE.symbol] =
    units_1.KILOGRAMS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_MINUTE.name] =
    units_1.KILOGRAMS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_SECOND.symbol] =
    units_1.KILOGRAMS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_SECOND.name] =
    units_1.KILOGRAMS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_TONNE.symbol] =
    units_1.KILOGRAMS_PER_TONNE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOGRAMS_PER_TONNE.name] =
    units_1.KILOGRAMS_PER_TONNE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOHERTZ.symbol] = units_1.KILOHERTZ;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOHERTZ.name] = units_1.KILOHERTZ;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOJOULE.symbol] = units_1.KILOJOULE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOJOULE.name] = units_1.KILOJOULE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOMETRE.symbol] = units_1.KILOMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOMETRE.name] = units_1.KILOMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOMETRES_PER_HOUR.symbol] =
    units_1.KILOMETRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOMETRES_PER_HOUR.name] =
    units_1.KILOMETRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOMETRES_PER_SECOND.symbol] =
    units_1.KILOMETRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOMETRES_PER_SECOND.name] =
    units_1.KILOMETRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILONEWTON.symbol] = units_1.KILONEWTON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILONEWTON.name] = units_1.KILONEWTON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILONEWTON_METRE.symbol] =
    units_1.KILONEWTON_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILONEWTON_METRE.name] =
    units_1.KILONEWTON_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOPASCAL.symbol] = units_1.KILOPASCAL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOPASCAL.name] = units_1.KILOPASCAL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOTON.symbol] = units_1.KILOTON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOTON.name] = units_1.KILOTON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOTONNE.symbol] = units_1.KILOTONNE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOTONNE.name] = units_1.KILOTONNE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOVOLT_AMPERE.symbol] =
    units_1.KILOVOLT_AMPERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOVOLT_AMPERE.name] =
    units_1.KILOVOLT_AMPERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOVOLT_AMPERE_REACTIVE.symbol] =
    units_1.KILOVOLT_AMPERE_REACTIVE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOVOLT_AMPERE_REACTIVE.name] =
    units_1.KILOVOLT_AMPERE_REACTIVE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOWATT.symbol] = units_1.KILOWATT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOWATT.name] = units_1.KILOWATT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOWATT_HOUR.symbol] =
    units_1.KILOWATT_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOWATT_HOUR.name] = units_1.KILOWATT_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOWATT_HOUR_PER_LITRE.symbol] =
    units_1.KILOWATT_HOUR_PER_LITRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KILOWATT_HOUR_PER_LITRE.name] =
    units_1.KILOWATT_HOUR_PER_LITRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KNOTS.symbol] = units_1.KNOTS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.KNOTS.name] = units_1.KNOTS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRE.symbol] = units_1.LITRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRE.name] = units_1.LITRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_HOUR.symbol] =
    units_1.LITRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_HOUR.name] =
    units_1.LITRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_KILOMETRE.symbol] =
    units_1.LITRES_PER_KILOMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_KILOMETRE.name] =
    units_1.LITRES_PER_KILOMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_MINUTE.symbol] =
    units_1.LITRES_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_MINUTE.name] =
    units_1.LITRES_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_SECOND.symbol] =
    units_1.LITRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_SECOND.name] =
    units_1.LITRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_SQUARE_METRE.symbol] =
    units_1.LITRES_PER_SQUARE_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LITRES_PER_SQUARE_METRE.name] =
    units_1.LITRES_PER_SQUARE_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOADS.symbol] = units_1.LOADS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOADS.name] = units_1.LOADS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOADS_PER_HOUR.symbol] =
    units_1.LOADS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOADS_PER_HOUR.name] =
    units_1.LOADS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOADS_PER_MINUTE.symbol] =
    units_1.LOADS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOADS_PER_MINUTE.name] =
    units_1.LOADS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOADS_PER_SECOND.symbol] =
    units_1.LOADS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOADS_PER_SECOND.name] =
    units_1.LOADS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_METRES.symbol] =
    units_1.LOOSE_CUBIC_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_METRES.name] =
    units_1.LOOSE_CUBIC_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_METRES_PER_HOUR.symbol] =
    units_1.LOOSE_CUBIC_METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_METRES_PER_HOUR.name] =
    units_1.LOOSE_CUBIC_METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_METRES_PER_MINUTE.symbol] =
    units_1.LOOSE_CUBIC_METRES_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_METRES_PER_MINUTE.name] =
    units_1.LOOSE_CUBIC_METRES_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_METRES_PER_SECOND.symbol] =
    units_1.LOOSE_CUBIC_METRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_METRES_PER_SECOND.name] =
    units_1.LOOSE_CUBIC_METRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_YARDS.symbol] =
    units_1.LOOSE_CUBIC_YARDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_YARDS.name] =
    units_1.LOOSE_CUBIC_YARDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_YARDS_PER_HOUR.symbol] =
    units_1.LOOSE_CUBIC_YARDS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_YARDS_PER_HOUR.name] =
    units_1.LOOSE_CUBIC_YARDS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_YARDS_PER_MINUTE.symbol] =
    units_1.LOOSE_CUBIC_YARDS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LOOSE_CUBIC_YARDS_PER_MINUTE.name] =
    units_1.LOOSE_CUBIC_YARDS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LUMEN.symbol] = units_1.LUMEN;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LUMEN.name] = units_1.LUMEN;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LUX.symbol] = units_1.LUX;
  UNITS_BY_SYMBOL_AND_NAME[units_1.LUX.name] = units_1.LUX;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MEGABYTE.symbol] = units_1.MEGABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MEGABYTE.name] = units_1.MEGABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MEGAJOULE.symbol] = units_1.MEGAJOULE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MEGAJOULE.name] = units_1.MEGAJOULE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MEGAPASCAL.symbol] = units_1.MEGAPASCAL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MEGAPASCAL.name] = units_1.MEGAPASCAL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRE.symbol] = units_1.METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRE.name] = units_1.METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRES_PER_HOUR.symbol] =
    units_1.METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRES_PER_HOUR.name] =
    units_1.METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRES_PER_MINUTE.symbol] =
    units_1.METRES_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRES_PER_MINUTE.name] =
    units_1.METRES_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRES_PER_SECOND.symbol] =
    units_1.METRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRES_PER_SECOND.name] =
    units_1.METRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRES_PER_SECOND_SQUARED.symbol] =
    units_1.METRES_PER_SECOND_SQUARED;
  UNITS_BY_SYMBOL_AND_NAME[units_1.METRES_PER_SECOND_SQUARED.name] =
    units_1.METRES_PER_SECOND_SQUARED;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MG_KOH_PER_G.symbol] = units_1.MG_KOH_PER_G;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MG_KOH_PER_G.name] = units_1.MG_KOH_PER_G;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MICROSECOND.symbol] = units_1.MICROSECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MICROSECOND.name] = units_1.MICROSECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILE.symbol] = units_1.MILE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILE.name] = units_1.MILE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILES_PER_HOUR.symbol] =
    units_1.MILES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILES_PER_HOUR.name] =
    units_1.MILES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIAMPERE.symbol] = units_1.MILLIAMPERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIAMPERE.name] = units_1.MILLIAMPERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIGRAM.symbol] = units_1.MILLIGRAM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIGRAM.name] = units_1.MILLIGRAM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIMETRE.symbol] = units_1.MILLIMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIMETRE.name] = units_1.MILLIMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIMETRES_PER_SECOND.symbol] =
    units_1.MILLIMETRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIMETRES_PER_SECOND.name] =
    units_1.MILLIMETRES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIONS.symbol] = units_1.MILLIONS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIONS.name] = units_1.MILLIONS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLISECOND.symbol] = units_1.MILLISECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLISECOND.name] = units_1.MILLISECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIVOLT.symbol] = units_1.MILLIVOLT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MILLIVOLT.name] = units_1.MILLIVOLT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MINUTE.symbol] = units_1.MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MINUTE.name] = units_1.MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MM_OF_MERCURY.symbol] =
    units_1.MM_OF_MERCURY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MM_OF_MERCURY.name] = units_1.MM_OF_MERCURY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MOLE.symbol] = units_1.MOLE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.MOLE.name] = units_1.MOLE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.NEWTON.symbol] = units_1.NEWTON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.NEWTON.name] = units_1.NEWTON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.NEWTON_METRE.symbol] = units_1.NEWTON_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.NEWTON_METRE.name] = units_1.NEWTON_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OHM.symbol] = units_1.OHM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OHM.name] = units_1.OHM;
  UNITS_BY_SYMBOL_AND_NAME[units_1.ONE.symbol] = units_1.ONE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.ONE.name] = units_1.ONE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OUNCE.symbol] = units_1.OUNCE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OUNCE.name] = units_1.OUNCE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OUNCETROY.symbol] = units_1.OUNCETROY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OUNCETROY.name] = units_1.OUNCETROY;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OUNCES_PER_SHORT_TON.symbol] =
    units_1.OUNCES_PER_SHORT_TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OUNCES_PER_SHORT_TON.name] =
    units_1.OUNCES_PER_SHORT_TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OUNCESTROY_PER_SHORT_TON.symbol] =
    units_1.OUNCESTROY_PER_SHORT_TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.OUNCESTROY_PER_SHORT_TON.name] =
    units_1.OUNCESTROY_PER_SHORT_TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PARTS_PER_BILLION.symbol] =
    units_1.PARTS_PER_BILLION;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PARTS_PER_BILLION.name] =
    units_1.PARTS_PER_BILLION;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PARTS_PER_MILLION.symbol] =
    units_1.PARTS_PER_MILLION;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PARTS_PER_MILLION.name] =
    units_1.PARTS_PER_MILLION;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PASCAL.symbol] = units_1.PASCAL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PASCAL.name] = units_1.PASCAL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PASCAL_SECOND.symbol] =
    units_1.PASCAL_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PASCAL_SECOND.name] = units_1.PASCAL_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PERCENT.symbol] = units_1.PERCENT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PERCENT.name] = units_1.PERCENT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PETABYTE.symbol] = units_1.PETABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PETABYTE.name] = units_1.PETABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PINT.symbol] = units_1.PINT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PINT.name] = units_1.PINT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PIXEL.symbol] = units_1.PIXEL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PIXEL.name] = units_1.PIXEL;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PIXELS_PER_METRE.symbol] =
    units_1.PIXELS_PER_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.PIXELS_PER_METRE.name] =
    units_1.PIXELS_PER_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POSITION_INDEX.symbol] =
    units_1.POSITION_INDEX;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POSITION_INDEX.name] =
    units_1.POSITION_INDEX;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUND.symbol] = units_1.POUND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUND.name] = units_1.POUND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUND_FOOT_PER_HOUR.symbol] =
    units_1.POUND_FOOT_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUND_FOOT_PER_HOUR.name] =
    units_1.POUND_FOOT_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUND_FORCE.symbol] = units_1.POUND_FORCE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUND_FORCE.name] = units_1.POUND_FORCE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUNDS_PER_CUBIC_FOOT.symbol] =
    units_1.POUNDS_PER_CUBIC_FOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUNDS_PER_CUBIC_FOOT.name] =
    units_1.POUNDS_PER_CUBIC_FOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUNDS_PER_HOUR.symbol] =
    units_1.POUNDS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUNDS_PER_HOUR.name] =
    units_1.POUNDS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUNDS_PER_MINUTE.symbol] =
    units_1.POUNDS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUNDS_PER_MINUTE.name] =
    units_1.POUNDS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUNDS_PER_SQUARE_INCH.symbol] =
    units_1.POUNDS_PER_SQUARE_INCH;
  UNITS_BY_SYMBOL_AND_NAME[units_1.POUNDS_PER_SQUARE_INCH.name] =
    units_1.POUNDS_PER_SQUARE_INCH;
  UNITS_BY_SYMBOL_AND_NAME[units_1.QUART.symbol] = units_1.QUART;
  UNITS_BY_SYMBOL_AND_NAME[units_1.QUART.name] = units_1.QUART;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RADIAN.symbol] = units_1.RADIAN;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RADIAN.name] = units_1.RADIAN;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RADIANS_PER_FOOT.symbol] =
    units_1.RADIANS_PER_FOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RADIANS_PER_FOOT.name] =
    units_1.RADIANS_PER_FOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RADIANS_PER_METRE.symbol] =
    units_1.RADIANS_PER_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RADIANS_PER_METRE.name] =
    units_1.RADIANS_PER_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RADIANS_PER_SECOND.symbol] =
    units_1.RADIANS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RADIANS_PER_SECOND.name] =
    units_1.RADIANS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RELATIVE.symbol] = units_1.RELATIVE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RELATIVE.name] = units_1.RELATIVE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.REVOLUTIONS.symbol] = units_1.REVOLUTIONS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.REVOLUTIONS.name] = units_1.REVOLUTIONS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.REVOLUTIONS_PER_MINUTE.symbol] =
    units_1.REVOLUTIONS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.REVOLUTIONS_PER_MINUTE.name] =
    units_1.REVOLUTIONS_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RPM_PER_SECOND.symbol] =
    units_1.RPM_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.RPM_PER_SECOND.name] =
    units_1.RPM_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SECOND.symbol] = units_1.SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SECOND.name] = units_1.SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SIEMENS.symbol] = units_1.SIEMENS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SIEMENS.name] = units_1.SIEMENS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SMOOT.symbol] = units_1.SMOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SMOOT.name] = units_1.SMOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_FEET.symbol] = units_1.SQUARE_FEET;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_FEET.name] = units_1.SQUARE_FEET;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_INCHES.symbol] =
    units_1.SQUARE_INCHES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_INCHES.name] = units_1.SQUARE_INCHES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_METRES.symbol] =
    units_1.SQUARE_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_METRES.name] = units_1.SQUARE_METRES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_MILES.symbol] = units_1.SQUARE_MILES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_MILES.name] = units_1.SQUARE_MILES;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_YARDS.symbol] = units_1.SQUARE_YARDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SQUARE_YARDS.name] = units_1.SQUARE_YARDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.STANDARD_CUBIC_FEET_PER_MINUTE.symbol] =
    units_1.STANDARD_CUBIC_FEET_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.STANDARD_CUBIC_FEET_PER_MINUTE.name] =
    units_1.STANDARD_CUBIC_FEET_PER_MINUTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.STANDARD_CUBIC_METRES_PER_HOUR.symbol] =
    units_1.STANDARD_CUBIC_METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.STANDARD_CUBIC_METRES_PER_HOUR.name] =
    units_1.STANDARD_CUBIC_METRES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.STERADIAN.symbol] = units_1.STERADIAN;
  UNITS_BY_SYMBOL_AND_NAME[units_1.STERADIAN.name] = units_1.STERADIAN;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SURFOOT.symbol] = units_1.SURFOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.SURFOOT.name] = units_1.SURFOOT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TEN_THOUSANDS.symbol] =
    units_1.TEN_THOUSANDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TEN_THOUSANDS.name] = units_1.TEN_THOUSANDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TENS.symbol] = units_1.TENS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TENS.name] = units_1.TENS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TERABYTE.symbol] = units_1.TERABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TERABYTE.name] = units_1.TERABYTE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TESLA.symbol] = units_1.TESLA;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TESLA.name] = units_1.TESLA;
  UNITS_BY_SYMBOL_AND_NAME[units_1.THOUSANDS.symbol] = units_1.THOUSANDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.THOUSANDS.name] = units_1.THOUSANDS;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TON.symbol] = units_1.TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TON.name] = units_1.TON;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TON_MILE.symbol] = units_1.TON_MILE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TON_MILE.name] = units_1.TON_MILE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TON_MILE_PER_HOUR.symbol] =
    units_1.TON_MILE_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TON_MILE_PER_HOUR.name] =
    units_1.TON_MILE_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNE.symbol] = units_1.TONNE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNE.name] = units_1.TONNE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNE_KILOMETRE.symbol] =
    units_1.TONNE_KILOMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNE_KILOMETRE.name] =
    units_1.TONNE_KILOMETRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNE_KILOMETRE_PER_HOUR.symbol] =
    units_1.TONNE_KILOMETRE_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNE_KILOMETRE_PER_HOUR.name] =
    units_1.TONNE_KILOMETRE_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNES_PER_CUBIC_METRE.symbol] =
    units_1.TONNES_PER_CUBIC_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNES_PER_CUBIC_METRE.name] =
    units_1.TONNES_PER_CUBIC_METRE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNES_PER_HOUR.symbol] =
    units_1.TONNES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNES_PER_HOUR.name] =
    units_1.TONNES_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNES_PER_SECOND.symbol] =
    units_1.TONNES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONNES_PER_SECOND.name] =
    units_1.TONNES_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONS_PER_CUBIC_YARD.symbol] =
    units_1.TONS_PER_CUBIC_YARD;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONS_PER_CUBIC_YARD.name] =
    units_1.TONS_PER_CUBIC_YARD;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONS_PER_HOUR.symbol] =
    units_1.TONS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONS_PER_HOUR.name] = units_1.TONS_PER_HOUR;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONS_PER_SECOND.symbol] =
    units_1.TONS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.TONS_PER_SECOND.name] =
    units_1.TONS_PER_SECOND;
  UNITS_BY_SYMBOL_AND_NAME[units_1.VOLT.symbol] = units_1.VOLT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.VOLT.name] = units_1.VOLT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.VOLT_AMPERE.symbol] = units_1.VOLT_AMPERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.VOLT_AMPERE.name] = units_1.VOLT_AMPERE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.VOLT_AMPERE_REACTIVE.symbol] =
    units_1.VOLT_AMPERE_REACTIVE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.VOLT_AMPERE_REACTIVE.name] =
    units_1.VOLT_AMPERE_REACTIVE;
  UNITS_BY_SYMBOL_AND_NAME[units_1.WATT.symbol] = units_1.WATT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.WATT.name] = units_1.WATT;
  UNITS_BY_SYMBOL_AND_NAME[units_1.WEBER.symbol] = units_1.WEBER;
  UNITS_BY_SYMBOL_AND_NAME[units_1.WEBER.name] = units_1.WEBER;
  UNITS_BY_SYMBOL_AND_NAME[units_1.YARD.symbol] = units_1.YARD;
  UNITS_BY_SYMBOL_AND_NAME[units_1.YARD.name] = units_1.YARD;
  // Map of QuantityType -> Unit[]
  var QUANTITY_TYPE_UNITS = {};
  QUANTITY_TYPE_UNITS[QuantityType.ABSORBED_DOSE] = [units_1.GRAY];
  QUANTITY_TYPE_UNITS[QuantityType.ACCELERATION] = [
    units_1.METRES_PER_SECOND_SQUARED,
    units_1.FEET_PER_SECOND_SQUARED,
    units_1.GRAVITY,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.ACIDITY] = [units_1.MG_KOH_PER_G];
  QUANTITY_TYPE_UNITS[QuantityType.AMOUNT_OF_SUBSTANCE] = [units_1.MOLE];
  QUANTITY_TYPE_UNITS[QuantityType.ANGLE] = [
    units_1.RADIAN,
    units_1.DEGREES,
    units_1.GRADIANS,
    units_1.REVOLUTIONS,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.ANGULAR_ACCELERATION] = [
    units_1.RPM_PER_SECOND,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.ANGULAR_SPEED] = [
    units_1.RADIANS_PER_SECOND,
    units_1.DEGREES_PER_SECOND,
    units_1.REVOLUTIONS_PER_MINUTE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.APPARENT_POWER] = [
    units_1.VOLT_AMPERE,
    units_1.KILOVOLT_AMPERE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.AREA] = [
    units_1.SQUARE_METRES,
    units_1.SQUARE_FEET,
    units_1.SQUARE_YARDS,
    units_1.SQUARE_INCHES,
    units_1.HECTARE,
    units_1.ACRE,
    units_1.SQUARE_MILES,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.BANK_VOLUME] = [
    units_1.BANK_CUBIC_METRES,
    units_1.BANK_CUBIC_YARDS,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.BANK_VOLUME_FLOW_RATE] = [
    units_1.BANK_CUBIC_METRES_PER_SECOND,
    units_1.BANK_CUBIC_METRES_PER_HOUR,
    units_1.BANK_CUBIC_METRES_PER_MINUTE,
    units_1.BANK_CUBIC_YARDS_PER_MINUTE,
    units_1.BANK_CUBIC_YARDS_PER_HOUR,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.COUNT_PER_TIME] = [
    units_1.COUNT_PER_SECOND,
    units_1.COUNT_PER_MINUTE,
    units_1.COUNT_PER_HOUR,
    units_1.BAUD,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.CURVATURE] = [
    units_1.RADIANS_PER_METRE,
    units_1.DEGREES_PER_METRE,
    units_1.RADIANS_PER_FOOT,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.DENSITY] = [
    units_1.KILOGRAMS_PER_CUBIC_METRE,
    units_1.TONNES_PER_CUBIC_METRE,
    units_1.GRAMMES_PER_CUBIC_CENTIMETRE,
    units_1.POUNDS_PER_CUBIC_FOOT,
    units_1.TONS_PER_CUBIC_YARD,
    units_1.CUBIC_FEET_PER_TON,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.ELECTRIC_CAPACITANCE] = [units_1.FARAD];
  QUANTITY_TYPE_UNITS[QuantityType.ELECTRIC_CHARGE] = [units_1.COULOMB];
  QUANTITY_TYPE_UNITS[QuantityType.ELECTRIC_CONDUCTANCE] = [units_1.SIEMENS];
  QUANTITY_TYPE_UNITS[QuantityType.ELECTRIC_CURRENT] = [
    units_1.AMPERE,
    units_1.MILLIAMPERE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.ELECTRIC_INDUCTANCE] = [units_1.HENRY];
  QUANTITY_TYPE_UNITS[QuantityType.ELECTRIC_POTENTIAL] = [
    units_1.VOLT,
    units_1.MILLIVOLT,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.ELECTRIC_RESISTANCE] = [units_1.OHM];
  QUANTITY_TYPE_UNITS[QuantityType.ENERGY] = [
    units_1.JOULE,
    units_1.FOOT_POUND,
    units_1.BRITISH_THERMAL_UNIT,
    units_1.CALORIE,
    units_1.KILOWATT_HOUR,
    units_1.HORSEPOWER_HOUR,
    units_1.KILOJOULE,
    units_1.MEGAJOULE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.ENERGY_PER_FUEL_BURN] = [
    units_1.KILOWATT_HOUR_PER_LITRE,
    units_1.HORSEPOWER_HOUR_PER_GALLON,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.FORCE] = [
    units_1.NEWTON,
    units_1.KILONEWTON,
    units_1.POUND_FORCE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.FREQUENCY] = [
    units_1.HERTZ,
    units_1.KILOHERTZ,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.FUEL_BURN_PER_DISTANCE] = [
    units_1.CUBIC_METRES_PER_METRE,
    units_1.LITRES_PER_KILOMETRE,
    units_1.GALLONS_PER_KILOMETRE,
    units_1.GALLONS_PER_MILE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.ILLUMINANCE] = [units_1.LUX];
  QUANTITY_TYPE_UNITS[QuantityType.INDEX] = [
    units_1.INDEX,
    units_1.POSITION_INDEX,
    units_1.GEAR,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.LATITUDE] = [units_1.DEGREES_OF_LATITUDE];
  QUANTITY_TYPE_UNITS[QuantityType.LENGTH] = [
    units_1.METRE,
    units_1.FOOT,
    units_1.SURFOOT,
    units_1.INCH,
    units_1.MILE,
    units_1.YARD,
    units_1.KILOMETRE,
    units_1.MILLIMETRE,
    units_1.CENTIMETRE,
    units_1.CUBIT,
    units_1.SMOOT,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.LIQUID_VOLUME] = [
    units_1.LITRE,
    units_1.GALLON,
    units_1.QUART,
    units_1.PINT,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.LIQUID_VOLUME_PER_AREA] = [
    units_1.LITRES_PER_SQUARE_METRE,
    units_1.GALLONS_PER_SQUARE_FOOT,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.LOAD] = [units_1.LOADS];
  QUANTITY_TYPE_UNITS[QuantityType.LOAD_RATE] = [
    units_1.LOADS_PER_SECOND,
    units_1.LOADS_PER_MINUTE,
    units_1.LOADS_PER_HOUR,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.LONGITUDE] = [units_1.DEGREES_OF_LONGITUDE];
  QUANTITY_TYPE_UNITS[QuantityType.LOOSE_VOLUME] = [
    units_1.LOOSE_CUBIC_METRES,
    units_1.LOOSE_CUBIC_YARDS,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.LOOSE_VOLUME_FLOW_RATE] = [
    units_1.LOOSE_CUBIC_METRES_PER_SECOND,
    units_1.LOOSE_CUBIC_METRES_PER_HOUR,
    units_1.LOOSE_CUBIC_METRES_PER_MINUTE,
    units_1.LOOSE_CUBIC_YARDS_PER_MINUTE,
    units_1.LOOSE_CUBIC_YARDS_PER_HOUR,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.LUMINOUS_FLUX] = [units_1.LUMEN];
  QUANTITY_TYPE_UNITS[QuantityType.LUMINOUS_INTENSITY] = [units_1.CANDELA];
  QUANTITY_TYPE_UNITS[QuantityType.MAGNETIC_FLUX] = [units_1.WEBER];
  QUANTITY_TYPE_UNITS[QuantityType.MAGNETIC_FLUX_DENSITY] = [units_1.TESLA];
  QUANTITY_TYPE_UNITS[QuantityType.MASS] = [
    units_1.KILOGRAM,
    units_1.MILLIGRAM,
    units_1.GRAM,
    units_1.POUND,
    units_1.CARAT,
    units_1.OUNCE,
    units_1.OUNCETROY,
    units_1.TON,
    units_1.TONNE,
    units_1.KILOTONNE,
    units_1.KILOTON,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.MASS_DISTANCE] = [
    units_1.KILOGRAM_METRE,
    units_1.TONNE_KILOMETRE,
    units_1.TON_MILE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.MASS_FLOW_RATE] = [
    units_1.KILOGRAMS_PER_SECOND,
    units_1.KILOGRAMS_PER_HOUR,
    units_1.KILOGRAMS_PER_MINUTE,
    units_1.TONS_PER_SECOND,
    units_1.POUNDS_PER_MINUTE,
    units_1.POUNDS_PER_HOUR,
    units_1.TONS_PER_HOUR,
    units_1.TONNES_PER_SECOND,
    units_1.TONNES_PER_HOUR,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.MASS_SPEED] = [
    units_1.KILOGRAM_METRE_PER_SECOND,
    units_1.TON_MILE_PER_HOUR,
    units_1.TONNE_KILOMETRE_PER_HOUR,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.PARTS_PER_PARTS] = [
    units_1.PARTS_PER_MILLION,
    units_1.PARTS_PER_BILLION,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.POWER] = [
    units_1.WATT,
    units_1.POUND_FOOT_PER_HOUR,
    units_1.HORSEPOWER,
    units_1.KILOWATT,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.PRESSURE] = [
    units_1.PASCAL,
    units_1.KILOPASCAL,
    units_1.MEGAPASCAL,
    units_1.ATMOSPHERE,
    units_1.BAR,
    units_1.POUNDS_PER_SQUARE_INCH,
    units_1.MM_OF_MERCURY,
    units_1.INCH_OF_WATER,
    units_1.INCH_OF_MERCURY,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.QUANTITY] = [
    units_1.COUNT,
    units_1.TENS,
    units_1.HUNDREDS,
    units_1.THOUSANDS,
    units_1.TEN_THOUSANDS,
    units_1.HUNDRED_THOUSANDS,
    units_1.MILLIONS,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.RADIOACTIVITY] = [units_1.BECQUEREL];
  QUANTITY_TYPE_UNITS[QuantityType.RATIO] = [
    units_1.PERCENT,
    units_1.GRAMS_PER_SHORT_TON,
    units_1.KILOGRAMS_PER_TONNE,
    units_1.OUNCES_PER_SHORT_TON,
    units_1.OUNCESTROY_PER_SHORT_TON,
    units_1.GRAMS_PER_TONNE,
    units_1.RELATIVE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.REACTIVE_POWER] = [
    units_1.VOLT_AMPERE_REACTIVE,
    units_1.KILOVOLT_AMPERE_REACTIVE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.SCREEN_RESOLUTION] = [
    units_1.PIXELS_PER_METRE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.SCREEN_WIDTH] = [units_1.PIXEL];
  QUANTITY_TYPE_UNITS[QuantityType.SIGNAL_STRENGTH] = [units_1.DBM];
  QUANTITY_TYPE_UNITS[QuantityType.SOLID_ANGLE] = [units_1.STERADIAN];
  QUANTITY_TYPE_UNITS[QuantityType.SPEED] = [
    units_1.METRES_PER_SECOND,
    units_1.FEET_PER_SECOND,
    units_1.FEET_PER_MINUTE,
    units_1.FEET_PER_HOUR,
    units_1.MILLIMETRES_PER_SECOND,
    units_1.INCHES_PER_SECOND,
    units_1.KILOMETRES_PER_HOUR,
    units_1.KILOMETRES_PER_SECOND,
    units_1.METRES_PER_MINUTE,
    units_1.METRES_PER_HOUR,
    units_1.MILES_PER_HOUR,
    units_1.KNOTS,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.STORAGE] = [
    units_1.BYTE,
    units_1.BIT,
    units_1.KILOBYTE,
    units_1.MEGABYTE,
    units_1.GIGABYTE,
    units_1.TERABYTE,
    units_1.PETABYTE,
    units_1.EXABYTE,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.TEMPERATURE] = [
    units_1.KELVIN,
    units_1.CELSIUS,
    units_1.FAHRENHEIT,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.TIME] = [
    units_1.SECOND,
    units_1.MILLISECOND,
    units_1.MICROSECOND,
    units_1.MINUTE,
    units_1.HOUR,
    units_1.DAY,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.TORQUE] = [
    units_1.NEWTON_METRE,
    units_1.KILONEWTON_METRE,
    units_1.INCH_POUNDS,
    units_1.FOOT_POUNDS,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.UNITLESS] = [units_1.ONE];
  QUANTITY_TYPE_UNITS[QuantityType.VISCOSITY] = [units_1.PASCAL_SECOND];
  QUANTITY_TYPE_UNITS[QuantityType.VOLUME] = [
    units_1.CUBIC_METRES,
    units_1.KILO_CUBIC_METRES,
    units_1.CUBIC_FEET,
    units_1.CUBIC_YARDS,
    units_1.CUBIC_INCH,
    units_1.CUBIC_CENTIMETRES,
    units_1.CUBIC_MILLIMETRES,
  ];
  QUANTITY_TYPE_UNITS[QuantityType.VOLUMETRIC_FLOW_RATE] = [
    units_1.CUBIC_METRES_PER_SECOND,
    units_1.CUBIC_METRES_PER_HOUR,
    units_1.STANDARD_CUBIC_METRES_PER_HOUR,
    units_1.LITRES_PER_SECOND,
    units_1.LITRES_PER_MINUTE,
    units_1.LITRES_PER_HOUR,
    units_1.GALLONS_PER_SECOND,
    units_1.GALLONS_PER_MINUTE,
    units_1.GALLONS_PER_HOUR,
    units_1.CUBIC_FEET_PER_MINUTE,
    units_1.STANDARD_CUBIC_FEET_PER_MINUTE,
    units_1.CUBIC_FEET_PER_SECOND,
    units_1.CUBIC_INCHES_PER_SECOND,
    units_1.CUBIC_CENTREMETRES_PER_SECOND,
  ];
  // Map of QuantityType -> Unit (system)
  var QUANTITY_TYPE_SYSTEM_UNIT = {};
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ABSORBED_DOSE] = units_1.GRAY;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ACCELERATION] =
    units_1.METRES_PER_SECOND_SQUARED;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ACIDITY] = units_1.MG_KOH_PER_G;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.AMOUNT_OF_SUBSTANCE] = units_1.MOLE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ANGLE] = units_1.RADIAN;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ANGULAR_ACCELERATION] =
    units_1.RPM_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ANGULAR_SPEED] =
    units_1.RADIANS_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.APPARENT_POWER] = units_1.VOLT_AMPERE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.AREA] = units_1.SQUARE_METRES;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.BANK_VOLUME] =
    units_1.BANK_CUBIC_METRES;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.BANK_VOLUME_FLOW_RATE] =
    units_1.BANK_CUBIC_METRES_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.COUNT_PER_TIME] =
    units_1.COUNT_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.CURVATURE] = units_1.RADIANS_PER_METRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.DENSITY] =
    units_1.KILOGRAMS_PER_CUBIC_METRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ELECTRIC_CAPACITANCE] = units_1.FARAD;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ELECTRIC_CHARGE] = units_1.COULOMB;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ELECTRIC_CONDUCTANCE] =
    units_1.SIEMENS;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ELECTRIC_CURRENT] = units_1.AMPERE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ELECTRIC_INDUCTANCE] = units_1.HENRY;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ELECTRIC_POTENTIAL] = units_1.VOLT;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ELECTRIC_RESISTANCE] = units_1.OHM;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ENERGY] = units_1.JOULE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ENERGY_PER_FUEL_BURN] =
    units_1.KILOWATT_HOUR_PER_LITRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.FORCE] = units_1.NEWTON;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.FREQUENCY] = units_1.HERTZ;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.FUEL_BURN_PER_DISTANCE] =
    units_1.CUBIC_METRES_PER_METRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.ILLUMINANCE] = units_1.LUX;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.INDEX] = units_1.INDEX;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LATITUDE] =
    units_1.DEGREES_OF_LATITUDE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LENGTH] = units_1.METRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LIQUID_VOLUME] = units_1.LITRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LIQUID_VOLUME_PER_AREA] =
    units_1.LITRES_PER_SQUARE_METRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LOAD] = units_1.LOADS;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LOAD_RATE] = units_1.LOADS_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LONGITUDE] =
    units_1.DEGREES_OF_LONGITUDE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LOOSE_VOLUME] =
    units_1.LOOSE_CUBIC_METRES;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LOOSE_VOLUME_FLOW_RATE] =
    units_1.LOOSE_CUBIC_METRES_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LUMINOUS_FLUX] = units_1.LUMEN;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.LUMINOUS_INTENSITY] = units_1.CANDELA;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.MAGNETIC_FLUX] = units_1.WEBER;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.MAGNETIC_FLUX_DENSITY] = units_1.TESLA;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.MASS] = units_1.KILOGRAM;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.MASS_DISTANCE] =
    units_1.KILOGRAM_METRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.MASS_FLOW_RATE] =
    units_1.KILOGRAMS_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.MASS_SPEED] =
    units_1.KILOGRAM_METRE_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.PARTS_PER_PARTS] =
    units_1.PARTS_PER_MILLION;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.POWER] = units_1.WATT;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.PRESSURE] = units_1.PASCAL;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.QUANTITY] = units_1.COUNT;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.RADIOACTIVITY] = units_1.BECQUEREL;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.RATIO] = units_1.PERCENT;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.REACTIVE_POWER] =
    units_1.VOLT_AMPERE_REACTIVE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.SCREEN_RESOLUTION] =
    units_1.PIXELS_PER_METRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.SCREEN_WIDTH] = units_1.PIXEL;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.SIGNAL_STRENGTH] = units_1.DBM;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.SOLID_ANGLE] = units_1.STERADIAN;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.SPEED] = units_1.METRES_PER_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.STORAGE] = units_1.BYTE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.TEMPERATURE] = units_1.KELVIN;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.TIME] = units_1.SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.TORQUE] = units_1.NEWTON_METRE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.UNITLESS] = units_1.ONE;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.VISCOSITY] = units_1.PASCAL_SECOND;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.VOLUME] = units_1.CUBIC_METRES;
  QUANTITY_TYPE_SYSTEM_UNIT[QuantityType.VOLUMETRIC_FLOW_RATE] =
    units_1.CUBIC_METRES_PER_SECOND;
  /**
   * Return the {@link Unit}s supported by the given {@code quantityType}.
   *
   * @param quantityType A type of Quantity.
   * @return the {@link Unit}s supported by the given {@code quantityType}.
   */
  function getUnitsOfQuantityType(quantityType) {
    var units = QUANTITY_TYPE_UNITS[quantityType];
    if (units == null) {
      throw new Error("Unknown quantity type '" + quantityType + "'");
    }
    return units;
  }
  units_1.getUnitsOfQuantityType = getUnitsOfQuantityType;
  /**
   * System of Units.
   *
   * Allows the specification of a "preferred" unit for displaying each QuantityType.
   */
  var UnitSystem = /** @class */ (function () {
    function UnitSystem(_name, _preferredUnits) {
      this._name = _name;
      this._preferredUnits = _preferredUnits;
    }
    /**
     * Return the {@link UnitSystem} with the given {@code name}.
     *
     * @param name Name of a unit system
     * @return the {@link UnitSystem} with the given {@code name}.
     * @throws Error when not found
     */
    UnitSystem.of = function (name) {
      for (
        var _i = 0, UNIT_SYSTEMS_1 = UNIT_SYSTEMS;
        _i < UNIT_SYSTEMS_1.length;
        _i++
      ) {
        var unitSystem = UNIT_SYSTEMS_1[_i];
        if (unitSystem.name == name) {
          return unitSystem;
        }
      }
      throw new Error('Unit System not supported: ' + name);
    };
    Object.defineProperty(UnitSystem.prototype, 'name', {
      get: function () {
        return this._name;
      },
      enumerable: true,
      configurable: true,
    });
    Object.defineProperty(UnitSystem.prototype, 'preferredUnits', {
      /**
       * Return a map of {@link QuantityType} -> 'preferred' {@link Unit}.
       *
       * @return a map of {@link QuantityType} -> 'preferred' {@link Unit}.
       */
      get: function () {
        return this._preferredUnits;
      },
      enumerable: true,
      configurable: true,
    });
    /**
     * Return the 'preferred' unit for displaying a quantity of the given {@code quantityType}.
     *
     * @param quantityType A type of quantity
     * @return the 'preferred' unit for displaying a quantity of the given {@code quantityType}, else {@code null} if none.
     */
    UnitSystem.prototype.preferredUnit = function (quantityType) {
      return this._preferredUnits[quantityType];
    };
    /**
     * Return the 'system' unit for a quantity of the given {@code quantityType}.
     *
     * @param quantityType A type of quantity
     * @return the 'system' unit for a quantity of the given {@code quantityType}, else {@code null} if none.
     */
    UnitSystem.prototype.systemUnit = function (quantityType) {
      return QUANTITY_TYPE_SYSTEM_UNIT[quantityType];
    };
    UnitSystem.prototype.toString = function () {
      return this._name;
    };
    return UnitSystem;
  })();
  units_1.UnitSystem = UnitSystem;
  // MINING_SI UnitSystem
  var MINING_SI_PREFERRED_UNITS = {};
  MINING_SI_PREFERRED_UNITS[QuantityType.ABSORBED_DOSE] = units_1.GRAY;
  MINING_SI_PREFERRED_UNITS[QuantityType.ACCELERATION] =
    units_1.METRES_PER_SECOND_SQUARED;
  MINING_SI_PREFERRED_UNITS[QuantityType.ACIDITY] = units_1.MG_KOH_PER_G;
  MINING_SI_PREFERRED_UNITS[QuantityType.ANGLE] = units_1.DEGREES;
  MINING_SI_PREFERRED_UNITS[QuantityType.ANGULAR_ACCELERATION] =
    units_1.RPM_PER_SECOND;
  MINING_SI_PREFERRED_UNITS[QuantityType.ANGULAR_SPEED] =
    units_1.REVOLUTIONS_PER_MINUTE;
  MINING_SI_PREFERRED_UNITS[QuantityType.APPARENT_POWER] = units_1.VOLT_AMPERE;
  MINING_SI_PREFERRED_UNITS[QuantityType.AREA] = units_1.SQUARE_METRES;
  MINING_SI_PREFERRED_UNITS[QuantityType.BANK_VOLUME] =
    units_1.BANK_CUBIC_METRES;
  MINING_SI_PREFERRED_UNITS[QuantityType.BANK_VOLUME_FLOW_RATE] =
    units_1.BANK_CUBIC_METRES_PER_HOUR;
  MINING_SI_PREFERRED_UNITS[QuantityType.COUNT_PER_TIME] =
    units_1.COUNT_PER_HOUR;
  MINING_SI_PREFERRED_UNITS[QuantityType.CURVATURE] = units_1.RADIANS_PER_METRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.DENSITY] =
    units_1.TONNES_PER_CUBIC_METRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.ELECTRIC_CAPACITANCE] = units_1.FARAD;
  MINING_SI_PREFERRED_UNITS[QuantityType.ELECTRIC_CHARGE] = units_1.COULOMB;
  MINING_SI_PREFERRED_UNITS[QuantityType.ELECTRIC_CONDUCTANCE] =
    units_1.SIEMENS;
  MINING_SI_PREFERRED_UNITS[QuantityType.ELECTRIC_CURRENT] = units_1.AMPERE;
  MINING_SI_PREFERRED_UNITS[QuantityType.ELECTRIC_INDUCTANCE] = units_1.HENRY;
  MINING_SI_PREFERRED_UNITS[QuantityType.ELECTRIC_POTENTIAL] = units_1.VOLT;
  MINING_SI_PREFERRED_UNITS[QuantityType.ELECTRIC_RESISTANCE] = units_1.OHM;
  MINING_SI_PREFERRED_UNITS[QuantityType.ENERGY] = units_1.JOULE;
  MINING_SI_PREFERRED_UNITS[QuantityType.ENERGY_PER_FUEL_BURN] =
    units_1.KILOWATT_HOUR_PER_LITRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.FORCE] = units_1.NEWTON;
  MINING_SI_PREFERRED_UNITS[QuantityType.FUEL_BURN_PER_DISTANCE] =
    units_1.LITRES_PER_KILOMETRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.ILLUMINANCE] = units_1.LUX;
  MINING_SI_PREFERRED_UNITS[QuantityType.INDEX] = units_1.INDEX;
  MINING_SI_PREFERRED_UNITS[QuantityType.LENGTH] = units_1.METRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.LIQUID_VOLUME] = units_1.LITRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.LIQUID_VOLUME_PER_AREA] =
    units_1.LITRES_PER_SQUARE_METRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.LOAD] = units_1.LOADS;
  MINING_SI_PREFERRED_UNITS[QuantityType.LOAD_RATE] = units_1.LOADS_PER_HOUR;
  MINING_SI_PREFERRED_UNITS[QuantityType.LOOSE_VOLUME] =
    units_1.LOOSE_CUBIC_METRES;
  MINING_SI_PREFERRED_UNITS[QuantityType.LOOSE_VOLUME_FLOW_RATE] =
    units_1.LOOSE_CUBIC_METRES_PER_HOUR;
  MINING_SI_PREFERRED_UNITS[QuantityType.LUMINOUS_FLUX] = units_1.LUMEN;
  MINING_SI_PREFERRED_UNITS[QuantityType.MAGNETIC_FLUX] = units_1.WEBER;
  MINING_SI_PREFERRED_UNITS[QuantityType.MAGNETIC_FLUX_DENSITY] = units_1.TESLA;
  MINING_SI_PREFERRED_UNITS[QuantityType.MASS] = units_1.TONNE;
  MINING_SI_PREFERRED_UNITS[QuantityType.MASS_DISTANCE] =
    units_1.TONNE_KILOMETRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.MASS_FLOW_RATE] =
    units_1.TONNES_PER_HOUR;
  MINING_SI_PREFERRED_UNITS[QuantityType.MASS_SPEED] =
    units_1.TONNE_KILOMETRE_PER_HOUR;
  MINING_SI_PREFERRED_UNITS[QuantityType.PARTS_PER_PARTS] =
    units_1.PARTS_PER_MILLION;
  MINING_SI_PREFERRED_UNITS[QuantityType.POWER] = units_1.WATT;
  MINING_SI_PREFERRED_UNITS[QuantityType.PRESSURE] = units_1.KILOPASCAL;
  MINING_SI_PREFERRED_UNITS[QuantityType.QUANTITY] = units_1.COUNT;
  MINING_SI_PREFERRED_UNITS[QuantityType.RADIOACTIVITY] = units_1.BECQUEREL;
  MINING_SI_PREFERRED_UNITS[QuantityType.RATIO] = units_1.PERCENT;
  MINING_SI_PREFERRED_UNITS[QuantityType.REACTIVE_POWER] =
    units_1.VOLT_AMPERE_REACTIVE;
  MINING_SI_PREFERRED_UNITS[QuantityType.SIGNAL_STRENGTH] = units_1.DBM;
  MINING_SI_PREFERRED_UNITS[QuantityType.SOLID_ANGLE] = units_1.STERADIAN;
  MINING_SI_PREFERRED_UNITS[QuantityType.SPEED] = units_1.KILOMETRES_PER_HOUR;
  MINING_SI_PREFERRED_UNITS[QuantityType.STORAGE] = units_1.BYTE;
  MINING_SI_PREFERRED_UNITS[QuantityType.TEMPERATURE] = units_1.CELSIUS;
  MINING_SI_PREFERRED_UNITS[QuantityType.TIME] = units_1.SECOND;
  MINING_SI_PREFERRED_UNITS[QuantityType.TORQUE] = units_1.NEWTON_METRE;
  MINING_SI_PREFERRED_UNITS[QuantityType.VISCOSITY] = units_1.PASCAL_SECOND;
  MINING_SI_PREFERRED_UNITS[QuantityType.VOLUME] = units_1.CUBIC_METRES;
  MINING_SI_PREFERRED_UNITS[QuantityType.VOLUMETRIC_FLOW_RATE] =
    units_1.LITRES_PER_HOUR;
  units_1.MINING_SI = new UnitSystem('Mining SI', MINING_SI_PREFERRED_UNITS);
  // MINING_IMPERIAL UnitSystem
  var MINING_IMPERIAL_PREFERRED_UNITS = {};
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ABSORBED_DOSE] = units_1.GRAY;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ACCELERATION] =
    units_1.METRES_PER_SECOND_SQUARED;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ACIDITY] = units_1.MG_KOH_PER_G;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ANGLE] = units_1.DEGREES;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ANGULAR_ACCELERATION] =
    units_1.RPM_PER_SECOND;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ANGULAR_SPEED] =
    units_1.REVOLUTIONS_PER_MINUTE;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.APPARENT_POWER] =
    units_1.VOLT_AMPERE;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.AREA] = units_1.SQUARE_FEET;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.BANK_VOLUME] =
    units_1.BANK_CUBIC_YARDS;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.BANK_VOLUME_FLOW_RATE] =
    units_1.BANK_CUBIC_YARDS_PER_HOUR;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.COUNT_PER_TIME] =
    units_1.COUNT_PER_HOUR;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.CURVATURE] =
    units_1.RADIANS_PER_FOOT;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.DENSITY] =
    units_1.TONS_PER_CUBIC_YARD;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ELECTRIC_CAPACITANCE] =
    units_1.FARAD;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ELECTRIC_CHARGE] =
    units_1.COULOMB;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ELECTRIC_CONDUCTANCE] =
    units_1.SIEMENS;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ELECTRIC_CURRENT] =
    units_1.AMPERE;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ELECTRIC_INDUCTANCE] =
    units_1.HENRY;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ELECTRIC_POTENTIAL] =
    units_1.VOLT;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ELECTRIC_RESISTANCE] =
    units_1.OHM;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ENERGY] = units_1.JOULE;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ENERGY_PER_FUEL_BURN] =
    units_1.HORSEPOWER_HOUR_PER_GALLON;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.FORCE] = units_1.NEWTON;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.FUEL_BURN_PER_DISTANCE] =
    units_1.GALLONS_PER_MILE;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.ILLUMINANCE] = units_1.LUX;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.INDEX] = units_1.INDEX;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.LENGTH] = units_1.FOOT;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.LIQUID_VOLUME] = units_1.GALLON;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.LIQUID_VOLUME_PER_AREA] =
    units_1.GALLONS_PER_SQUARE_FOOT;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.LOAD] = units_1.LOADS;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.LOAD_RATE] =
    units_1.LOADS_PER_HOUR;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.LOOSE_VOLUME] =
    units_1.LOOSE_CUBIC_YARDS;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.LOOSE_VOLUME_FLOW_RATE] =
    units_1.LOOSE_CUBIC_YARDS_PER_HOUR;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.LUMINOUS_FLUX] = units_1.LUMEN;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.MAGNETIC_FLUX] = units_1.WEBER;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.MAGNETIC_FLUX_DENSITY] =
    units_1.TESLA;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.MASS] = units_1.TON;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.MASS_DISTANCE] =
    units_1.TON_MILE;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.MASS_FLOW_RATE] =
    units_1.TONS_PER_HOUR;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.MASS_SPEED] =
    units_1.TON_MILE_PER_HOUR;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.PARTS_PER_PARTS] =
    units_1.PARTS_PER_MILLION;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.POWER] = units_1.WATT;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.PRESSURE] =
    units_1.POUNDS_PER_SQUARE_INCH;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.QUANTITY] = units_1.COUNT;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.RADIOACTIVITY] =
    units_1.BECQUEREL;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.RATIO] = units_1.PERCENT;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.REACTIVE_POWER] =
    units_1.VOLT_AMPERE_REACTIVE;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.SIGNAL_STRENGTH] = units_1.DBM;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.SOLID_ANGLE] = units_1.STERADIAN;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.SPEED] = units_1.MILES_PER_HOUR;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.STORAGE] = units_1.BYTE;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.TEMPERATURE] =
    units_1.FAHRENHEIT;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.TIME] = units_1.SECOND;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.TORQUE] = units_1.FOOT_POUNDS;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.VISCOSITY] =
    units_1.PASCAL_SECOND;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.VOLUME] = units_1.CUBIC_YARDS;
  MINING_IMPERIAL_PREFERRED_UNITS[QuantityType.VOLUMETRIC_FLOW_RATE] =
    units_1.GALLONS_PER_HOUR;
  units_1.MINING_IMPERIAL = new UnitSystem(
    'Mining Imperial',
    MINING_IMPERIAL_PREFERRED_UNITS,
  );
  var UNIT_SYSTEMS = [units_1.MINING_SI, units_1.MINING_IMPERIAL];
  /**
   * The "local" {@link UnitSystem}.
   */
  var _localUnitSystem = units_1.MINING_SI;
  /**
   * Set the "local" {@link UnitSystem}
   *
   * @param name Name of a {@link UnitSystem}.
   */
  function setLocalUnitSystem(name) {
    _localUnitSystem = UnitSystem.of(name);
  }
  units_1.setLocalUnitSystem = setLocalUnitSystem;
  /**
   * Return the name of the "local" {@link UnitSystem}.
   *
   * @return the name of the "local" {@link UnitSystem}
   */
  function getLocalUnitSystem() {
    return _localUnitSystem.name;
  }
  units_1.getLocalUnitSystem = getLocalUnitSystem;
  /**
   * Return all available unit systems
   *
   * @return All available unit systems
   */
  function getUnitSystems() {
    return UNIT_SYSTEMS;
  }
  units_1.getUnitSystems = getUnitSystems;
  /**
   * A quantity, which consists of a numeric {@code value} and a {@link #Unit}.
   */
  var Quantity = /** @class */ (function () {
    function Quantity(_value, _unit) {
      this._value = _value;
      this._unit = _unit;
    }
    /**
     * Return a {@link Quantity} with the given {@code value} and {@code unit}.
     *
     * @param value A numeric value
     * @param unit The unit object, symbol or name of a {@link Unit}.
     * @return a {@link Quantity} with the given {@code value} and {@code unit}.
     */
    Quantity.of = function (value, unit) {
      var localUnit = null;
      if (unit instanceof Unit) {
        unit = unit;
      } else {
        unit = Unit.of(unit);
      }
      return new Quantity(value, unit);
    };
    Object.defineProperty(Quantity.prototype, 'value', {
      get: function () {
        return this._value;
      },
      enumerable: true,
      configurable: true,
    });
    Object.defineProperty(Quantity.prototype, 'intValue', {
      get: function () {
        return Math.round(this._value);
      },
      enumerable: true,
      configurable: true,
    });
    Object.defineProperty(Quantity.prototype, 'unit', {
      get: function () {
        return this._unit;
      },
      enumerable: true,
      configurable: true,
    });
    /**
     * Convert this quantity to the given {@code unit}.
     *
     * @param unit A unit
     * @return this quantity converted to the given {@code unit}.
     */
    Quantity.prototype.toUnit = function (unit) {
      if (this._unit === unit) {
        return this;
      }
      if (this._unit.quantityType !== unit.quantityType) {
        throw new Error(
          "Incompatible units : '" + this._unit + "' v '" + unit + "'",
        );
      }
      var baseValue = this._unit.toBaseUnit(this._value);
      var localValue = unit.fromBaseUnit(baseValue);
      return new Quantity(localValue, unit);
    };
    /**
     * Convert the {@code qty} to the preferred "local" {@link Unit}.
     *
     * @return the {@code qty} converted to the preferred "local" {@link Unit}.
     */
    Quantity.prototype.toLocalUnit = function () {
      var localUnit = _localUnitSystem.preferredUnit(this._unit.quantityType);
      if (localUnit == null) {
        return this;
      }
      return this.toUnit(localUnit);
    };
    /**
     * Convert the {@code qty} to the system {@link Unit}.
     *
     * @return the {@code qty} converted to the system {@link Unit}.
     */
    Quantity.prototype.toSystemUnit = function () {
      var localSystemUnit = _localUnitSystem.systemUnit(
        this._unit.quantityType,
      );
      if (localSystemUnit == null) {
        return this;
      }
      return this.toUnit(localSystemUnit);
    };
    /**
     * Returns a String containing the representation of this Quantity.
     * It will use the whole integer value of the Quantity and the symbol
     */
    Quantity.prototype.toString = function () {
      return this.intValue + ' ' + this._unit.symbol;
    };
    /**
     * Returns a String containing the representation of this Quantity.
     * It will use the float value of the Quantity (using the number of provided
     * fixed decimal values) and the symbol
     */
    Quantity.prototype.toPreciseString = function (fixedDecimals) {
      return this._value.toFixed(fixedDecimals) + ' ' + this._unit.symbol;
    };
    Quantity.prototype.toJSON = function (key) {
      return {value: this._value, unit: this.unit.symbol};
    };
    Quantity.fromJSON = function (jsonStr) {
      var jsonObj = JSON.parse(jsonStr);
      var localValue = jsonObj.value;
      var localUnit = Unit.of(jsonObj.unit);
      return new Quantity(localValue, localUnit);
    };
    return Quantity;
  })();
  units_1.Quantity = Quantity;
})((units = exports.units || (exports.units = {})));
